Search.setIndex({"docnames": ["guide/classification", "guide/classification/graph_classification", "guide/classification/kgcompletion", "guide/classification/link_prediction", "guide/classification/node_classification", "guide/construction", "guide/construction/constituency_graph_construction", "guide/construction/dependencygraphconstruction", "guide/construction/dynamic_graph_construction", "guide/construction/embedding_construction", "guide/construction/iegraphconstruction", "guide/dataset", "guide/dataset/customize", "guide/dataset/workflow", "guide/decoding", "guide/decoding/a", "guide/decoding/b", "guide/decoding/stdrnndecoder", "guide/decoding/stdtreedecoder", "guide/evaluation", "guide/evaluation/a", "guide/evaluation/b", "guide/gnn", "guide/gnn/gat", "guide/gnn/gcn", "guide/gnn/ggnn", "guide/gnn/graphsage", "guide/graphdata", "guide/graphdata/batching", "guide/graphdata/construct", "guide/graphdata/manipulate", "index", "modules/data", "modules/datasets", "modules/evaluation", "modules/graph_construction", "modules/graph_embedding", "modules/loss", "modules/prediction", "tutorial/knowledge_graph_completion", "tutorial/math_word_problem", "tutorial/semantic_parsing", "tutorial/text_classification", "welcome/installation"], "filenames": ["guide/classification.rst", "guide/classification/graph_classification.rst", "guide/classification/kgcompletion.rst", "guide/classification/link_prediction.rst", "guide/classification/node_classification.rst", "guide/construction.rst", "guide/construction/constituency_graph_construction.rst", "guide/construction/dependencygraphconstruction.rst", "guide/construction/dynamic_graph_construction.rst", "guide/construction/embedding_construction.rst", "guide/construction/iegraphconstruction.rst", "guide/dataset.rst", "guide/dataset/customize.rst", "guide/dataset/workflow.rst", "guide/decoding.rst", "guide/decoding/a.rst", "guide/decoding/b.rst", "guide/decoding/stdrnndecoder.rst", "guide/decoding/stdtreedecoder.rst", "guide/evaluation.rst", "guide/evaluation/a.rst", "guide/evaluation/b.rst", "guide/gnn.rst", "guide/gnn/gat.rst", "guide/gnn/gcn.rst", "guide/gnn/ggnn.rst", "guide/gnn/graphsage.rst", "guide/graphdata.rst", "guide/graphdata/batching.rst", "guide/graphdata/construct.rst", "guide/graphdata/manipulate.rst", "index.rst", "modules/data.rst", "modules/datasets.rst", "modules/evaluation.rst", "modules/graph_construction.rst", "modules/graph_embedding.rst", "modules/loss.rst", "modules/prediction.rst", "tutorial/knowledge_graph_completion.rst", "tutorial/math_word_problem.rst", "tutorial/semantic_parsing.rst", "tutorial/text_classification.rst", "welcome/installation.rst"], "titles": ["Chapter 6. Classification", "Graph Classification", "Knowledge Graph Completion", "Link Prediction", "Node Classification", "Chapter 3. Graph Construction", "Constituency Graph Construction", "Dependency Graph Construction", "Dynamic Graph Construction", "Embedding Construction", "IE Graph Construction", "Chapter 2. Dataset", "Customizing your own dataset", "Dataset workflow", "Chapter 5. Decoder", "This is A", "This is B", "Chapter 5.1 Standard RNN Decoder", "Chapter 5.2 Standard Tree Decoder", "Chapter 7. Evaluations and Loss components", "This is A", "This is B", "Chapter 4. Graph Encoder", "Graph Attention Networks", "Graph Convolutional Networks", "Gated Graph Neural Networks", "GraphSAGE", "Chapter 1. Graph Data", "Batching", "Constructing GraphData", "Manipulating GraphData", "Graph4NLP Documentation", "graph4nlp.data", "graph4nlp.datasets", "graph4nlp.evaluation", "graph4nlp.graph_construction", "graph4nlp.graph_embedding", "graph4nlp.loss", "graph4nlp.prediction", "Knowledge Graph Completion Tutorial", "Math Word Problem Tutorial", "Semantic Parsing Tutorial", "Text Classification Tutorial", "Install Graph4NLP"], "terms": {"graph4nlp": [0, 2, 6, 7, 10, 12, 13, 14, 17, 18, 19, 27, 40, 41, 42], "implement": [0, 1, 2, 3, 4, 8, 12, 14, 17, 19, 23, 26, 27, 30, 31, 32, 33, 35, 38, 39, 41, 43], "four": [0, 26, 31], "standard": [0, 14, 38], "modul": [0, 1, 2, 3, 4, 6, 7, 10, 12, 14, 17, 18, 19, 31, 32, 33, 37, 38, 39, 40, 41, 42], "node": [0, 1, 2, 3, 6, 7, 9, 10, 17, 18, 23, 24, 25, 26, 29, 30, 32, 35, 40, 41, 42], "link": [0, 2, 7, 10, 35], "predict": [0, 1, 2, 8, 17, 18, 19, 34, 39, 41, 42], "kg": [0, 2, 35, 38], "complet": [0, 10, 12, 18, 26], "graph": [0, 3, 4, 9, 12, 14, 17, 26, 28, 29, 30, 31, 33, 37, 40, 41, 42], "respect": [0, 8, 14, 17], "gener": [0, 6, 12, 14, 17, 18, 24, 26, 28, 32, 35, 37], "thei": [0, 4, 7, 12, 14, 39], "take": [0, 1, 12, 14, 23, 24, 25, 26, 28, 32, 37, 38], "encod": [0, 3, 7, 9, 14, 17, 38, 40, 41, 42], "matrix": [0, 2, 8, 9, 23, 24, 25, 32, 38], "graphencod": [0, 14], "input": [0, 1, 2, 3, 4, 6, 7, 9, 10, 12, 14, 17, 18, 19, 23, 24, 25, 26, 32, 33, 35, 37, 38, 40], "target": [0, 2, 7, 14, 19, 32, 34, 35, 37, 38, 39], "object": [0, 2, 7, 10, 12, 13, 14, 30, 32, 35, 38], "knowledg": [0, 37], "i": [1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42], "downstream": [1, 3, 4, 8, 12, 32], "task": [1, 2, 3, 4, 7, 8, 10, 19, 38, 40], "conduct": [1, 3, 17, 35], "level": [1, 3, 4, 6, 10, 12, 22, 23, 26, 30, 41, 42], "onc": [1, 18, 32], "represent": [1, 8, 17, 26, 30, 38], "ar": [1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 17, 18, 24, 25, 26, 30, 32, 33, 35, 37, 38, 39, 40, 42, 43], "learn": [1, 2, 8, 9, 17, 18, 23, 26, 28, 31, 35, 38, 41], "gnn": [1, 3, 4, 9, 22, 23, 25, 39, 40, 41, 42], "one": [1, 3, 4, 6, 7, 10, 17, 18, 23, 24, 32, 34, 35, 37, 38], "can": [1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 17, 18, 23, 24, 25, 26, 30, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43], "obtain": [1, 7, 8, 9, 10, 17], "perform": [1, 6, 8, 12, 13, 17, 23, 24, 25, 26, 30], "To": [1, 2, 3, 4, 10, 12, 13, 17, 18, 23, 25, 26, 30, 32], "facilit": [1, 3, 4], "we": [1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 17, 18, 19, 23, 24, 25, 26, 28, 30, 32, 35, 37, 38, 39, 40, 41, 42, 43], "provid": [1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 23, 26, 27, 28, 29, 31, 32, 33, 35, 40, 41, 42, 43], "commonli": 1, "us": [1, 2, 3, 4, 8, 9, 12, 13, 17, 18, 19, 23, 24, 25, 26, 27, 28, 30, 31, 32, 35, 37, 38, 39, 40, 41, 42, 43], "thi": [1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 17, 18, 19, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 38, 39, 40, 41, 42], "high": [1, 3, 4, 10, 23, 26, 31, 32, 42], "which": [1, 2, 4, 7, 8, 10, 12, 18, 23, 28, 29, 30, 32, 35, 37, 38, 39, 41, 42], "consist": [1, 6, 7, 10, 12, 13, 30, 31, 35, 39, 40, 41, 42], "pool": [1, 12, 26, 38, 42], "compon": [1, 8, 28, 42], "multilay": [1, 42], "perceptron": [1, 42], "mlp": [1, 38, 42], "user": [1, 3, 4, 6, 7, 9, 10, 17, 18, 23, 26, 27, 28, 30, 32, 33, 35, 39, 41, 42], "specifi": [1, 3, 4, 9, 12, 13, 23, 30, 32, 35, 37, 38, 40, 41, 42, 43], "import": [1, 2, 4, 6, 7, 8, 9, 10, 17, 18, 19, 23, 30, 32, 41, 43], "hyperparamet": 1, "input_s": [1, 3, 4, 17, 23, 24, 25, 26, 38, 40, 42], "num_class": [1, 3, 4, 38, 42], "hidden_s": [1, 3, 4, 17, 23, 24, 25, 26, 38, 40, 42], "e": [1, 2, 6, 7, 8, 9, 10, 17, 18, 19, 23, 24, 31, 32, 33, 35, 39, 40, 41, 42], "list": [1, 3, 4, 7, 9, 10, 12, 26, 28, 29, 30, 32, 34, 35, 37, 38], "hidden": [1, 4, 17, 18, 23, 24, 25, 26, 38], "size": [1, 4, 25, 26, 30, 32, 37, 38, 39, 42], "each": [1, 3, 4, 6, 7, 8, 9, 10, 12, 17, 18, 19, 23, 24, 25, 26, 28, 30, 32, 34, 35, 37, 38], "dens": [1, 32], "layer": [1, 3, 4, 9, 23, 24, 25, 26, 31, 32, 35, 37, 38], "The": [1, 2, 3, 4, 6, 8, 9, 10, 12, 13, 14, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43], "class": [1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 19, 23, 24, 25, 26, 27, 33, 34, 35, 37, 38, 39, 40, 41, 42], "call": [1, 4, 8, 9, 26, 28, 30, 32, 35, 41, 42], "feedforwardnnlay": [1, 4, 38], "api": [1, 3, 4, 9, 17, 23, 26, 29, 39, 40, 41, 42], "implment": 1, "graphclassifierbas": 1, "def": [1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 18, 19, 23, 24, 25, 26, 39, 40, 41, 42], "__init__": [1, 2, 3, 4, 9, 12, 19, 23, 24, 25, 26, 39, 40, 41, 42], "self": [1, 2, 3, 4, 8, 9, 12, 13, 17, 18, 19, 23, 24, 25, 26, 32, 39, 40, 41, 42], "activ": [1, 3, 4, 23, 24, 26, 38, 39, 40, 42], "none": [1, 2, 4, 6, 7, 8, 9, 10, 12, 17, 18, 19, 23, 24, 25, 26, 29, 30, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43], "graph_pool_typ": [1, 38, 42], "max_pool": [1, 38], "kwarg": [1, 32, 33, 35, 38], "super": [1, 2, 3, 4, 9, 12, 19, 23, 24, 25, 26, 39, 40, 41, 42], "nn": [1, 2, 3, 4, 9, 18, 19, 23, 24, 25, 26, 37, 38, 39, 40, 42], "relu": [1, 3, 4, 8, 38, 40, 42], "avg_pool": 1, "graph_pool": [1, 38, 42], "elif": [1, 7, 8, 9, 23, 24, 25, 26, 39, 40, 41, 42], "els": [1, 2, 4, 6, 7, 8, 9, 10, 12, 17, 18, 19, 23, 24, 25, 26, 29, 39, 40, 41, 42], "rais": [1, 6, 7, 10, 12, 23, 24, 25, 30, 32, 39, 41, 42], "runtimeerror": [1, 23, 24, 25, 41, 42], "unknown": [1, 23, 24, 25, 39, 42], "type": [1, 2, 3, 4, 7, 10, 12, 17, 18, 25, 26, 30, 32, 33, 35, 37, 38, 39, 41, 42, 43], "format": [1, 6, 10, 23, 24, 25, 26, 32, 39, 40, 41, 42], "classifi": [1, 2, 3, 4], "averag": [1, 9, 17, 19, 37, 38, 42], "appli": [1, 3, 4, 8, 9, 17, 28, 37, 38, 40], "over": [1, 9, 11, 12, 13, 17, 18, 37, 38], "It": [1, 6, 7, 8, 10, 11, 12, 17, 19, 31, 34, 35, 37, 38, 40], "batch": [1, 3, 4, 11, 13, 17, 18, 27, 32, 37, 38, 39], "graphdata": [1, 2, 3, 4, 6, 7, 10, 12, 14, 17, 18, 23, 24, 25, 26, 27, 28, 32, 35, 38, 39], "return": [1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 17, 18, 19, 23, 26, 28, 30, 32, 34, 35, 37, 38, 39, 40, 41, 42], "featur": [1, 3, 4, 7, 17, 18, 22, 24, 25, 26, 29, 31, 32, 38], "tensor": [1, 2, 3, 4, 9, 12, 19, 24, 25, 26, 29, 30, 32, 37, 38, 41, 42], "contain": [1, 7, 9, 10, 12, 17, 18, 19, 32, 33, 34, 35, 37, 38, 39, 42], "vector": [1, 2, 12, 17, 26, 32, 37, 38], "poolingbas": 1, "forward": [1, 2, 3, 4, 19, 35, 37, 38, 39, 42], "feat": [1, 9, 23, 24, 25, 26, 38], "graph_list": [1, 12, 28, 42], "from_batch": [1, 9, 28], "output_feat": 1, "g": [1, 2, 7, 8, 9, 10, 12, 17, 19, 26, 28, 29, 30, 32, 33, 35, 38, 39, 40, 41, 42], "append": [1, 3, 4, 6, 7, 8, 9, 10, 12, 18, 23, 24, 26, 28, 29, 39, 40, 41, 42], "node_featur": [1, 2, 4, 9, 12, 17, 23, 24, 25, 26, 28, 29, 30, 32], "mean": [1, 6, 7, 8, 9, 10, 17, 19, 23, 26, 30, 37, 39, 41, 42], "dim": [1, 3, 8, 9, 17, 18, 19, 25, 41, 42], "0": [1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 17, 18, 19, 23, 24, 25, 26, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42], "torch": [1, 2, 3, 4, 8, 9, 12, 13, 17, 18, 19, 23, 24, 25, 26, 28, 29, 30, 32, 37, 38, 39, 40, 41, 42, 43], "stack": [1, 3, 8], "max": [1, 17, 18, 38, 41, 42], "an": [1, 2, 3, 4, 6, 7, 10, 11, 12, 17, 18, 19, 23, 24, 25, 26, 28, 29, 30, 31, 32, 35, 37, 38], "option": [1, 6, 7, 8, 10, 12, 19, 23, 24, 25, 26, 32, 33, 35, 37, 38], "linear": [1, 3, 4, 8, 24, 25, 26, 38], "project": [1, 23, 24, 26, 38, 43], "embed": [1, 2, 3, 4, 5, 12, 17, 18, 19, 23, 24, 25, 26, 35, 37, 38, 39, 40, 41, 42, 43], "befor": [1, 8, 9, 39, 43], "use_linear_proj": [1, 42], "fals": [1, 6, 7, 9, 10, 12, 17, 18, 19, 23, 24, 25, 26, 32, 33, 35, 37, 38, 39, 40, 41, 42], "assert": [1, 8, 9, 23, 24, 25, 28, 29, 41, 42], "should": [1, 3, 4, 17, 19, 23, 25, 26, 30, 32, 33, 37, 39, 42, 43], "when": [1, 6, 8, 9, 17, 18, 23, 24, 30, 32, 35, 37, 38, 41, 42], "set": [1, 7, 8, 9, 12, 17, 18, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42], "true": [1, 4, 6, 7, 8, 9, 10, 12, 17, 18, 19, 24, 25, 26, 32, 33, 35, 37, 38, 39, 40, 41, 42], "bia": [1, 24, 25, 26, 40, 42], "feat_tensor": 1, "purpos": 2, "new": [2, 6, 18, 29, 30, 32], "tripl": [2, 10, 35], "basi": [2, 27], "exist": [2, 12, 13, 29, 32, 41], "so": [2, 18, 39, 41, 42], "further": [2, 17, 30], "extend": [2, 12, 17, 18, 41], "usual": [2, 12, 17, 24, 28, 37], "consid": [2, 24, 26], "formal": [2, 7], "repres": [2, 3, 10, 12, 18, 23, 24, 26, 30, 31, 32, 33, 38, 40], "mathcal": [2, 7, 17, 23, 24, 25, 26], "v": [2, 7, 10, 17, 25, 42], "r": [2, 7, 12, 24, 25, 31, 32, 38], "entiti": [2, 4, 10, 38, 39], "v_i": [2, 25], "edg": [2, 3, 6, 7, 9, 17, 23, 24, 25, 26, 29, 30, 32, 33, 35, 38, 42], "v_": 2, "v_o": 2, "relat": [2, 3, 6, 7, 10, 30, 32, 38], "score": [2, 17, 18, 19, 23, 34, 38, 41, 42], "fact": 2, "like": [2, 6, 9, 18, 30, 35, 38], "left": [2, 23, 26, 39], "langl": 2, "subject": [2, 10, 35], "right": [2, 23, 24, 26, 39], "rangl": 2, "determin": [2, 23, 24, 25, 26], "those": [2, 32, 37], "belong": 2, "solv": [2, 40], "framework": [2, 26], "local": [2, 13], "neighborhood": [2, 8], "inform": [2, 7, 8, 10, 17, 18, 25, 26, 30, 32, 35], "chosen": 2, "from": [2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 17, 18, 19, 25, 26, 30, 32, 33, 35, 37, 38, 39, 40, 41, 42], "varieti": [2, 31], "model": [2, 6, 9, 12, 13, 17, 18, 19, 23, 24, 25, 26, 31, 32, 37], "regard": [2, 7, 8, 17], "function": [2, 3, 4, 6, 7, 8, 12, 19, 28, 32, 33, 34, 35, 37, 38, 39], "most": [2, 17, 19, 29], "common": [2, 30, 33, 42], "includ": [2, 8, 9, 11, 12, 17, 18, 19, 23, 26, 31, 32, 35, 38, 39, 41, 42], "translat": [2, 17, 40, 41], "base": [2, 3, 4, 6, 9, 10, 12, 17, 18, 19, 24, 25, 26, 33, 35, 37, 38, 39, 40, 41, 42, 43], "trans": 2, "factor": [2, 42], "neural": [2, 3, 4, 17, 19, 22, 24, 40], "network": [2, 3, 4, 9, 17, 18, 19, 22, 38, 40], "conv": [2, 39], "librari": [2, 9, 31, 32, 40, 41, 42], "paper": [2, 17, 19, 24, 31, 37, 38], "infer": [2, 28, 38, 40], "For": [2, 6, 7, 8, 9, 10, 13, 17, 18, 19, 23, 24, 30, 32, 39, 40, 42, 43], "equat": [2, 18, 24, 25, 40], "f": [2, 8, 24, 38, 40, 42], "": [2, 3, 4, 6, 7, 8, 12, 13, 17, 19, 27, 32, 34, 35, 37, 38, 39, 41, 42], "o": [2, 12, 13, 32, 38, 39, 41, 42, 43], "e_": [2, 23, 25, 38], "t": [2, 18, 23, 25, 32, 33, 38], "m_r": 2, "e_o": [2, 38], "mathbb": [2, 24, 25], "d": [2, 24, 25, 31, 32, 38, 41, 42], "time": [2, 6, 7, 10, 24, 25, 32, 39, 42], "In": [2, 3, 4, 7, 9, 10, 12, 13, 18, 19, 23, 24, 25, 26, 28, 30, 37, 38, 39, 40, 41, 42], "everi": [2, 24], "diagon": 2, "our": [2, 6, 12, 17, 40, 41, 42], "all": [2, 3, 4, 8, 9, 10, 12, 17, 18, 24, 25, 26, 28, 29, 32, 35, 37, 38, 39, 43], "given": [2, 3, 6, 7, 8, 10, 32, 37, 38, 40], "Then": [2, 3, 7, 8, 10, 13, 17, 18, 24, 25, 26, 32, 40, 43], "comput": [2, 3, 4, 8, 9, 17, 18, 23, 24, 25, 26, 27, 28, 32, 34, 35, 37, 38], "logit": [2, 3, 4, 19, 23, 24, 26, 37, 38, 39, 41, 42], "multi": [2, 3, 4, 9, 19, 23, 24, 26, 35, 37, 38, 42], "loss": [2, 8, 17, 32, 38, 39, 40, 41, 42], "bceloss": [2, 19, 37, 38], "predit": [2, 38], "posit": [2, 17, 18, 19, 30, 35, 37, 38], "neg": [2, 8, 19, 37, 38], "exampl": [2, 3, 4, 6, 7, 10, 12, 17, 18, 24, 25, 26, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42], "pairwis": [2, 19, 37], "softplusloss": [2, 19, 37], "sigmoidloss": [2, 19, 37], "more": [2, 7, 9, 17, 23, 26, 29, 35, 37, 39], "detail": [2, 9, 26, 29, 37, 39, 43], "about": [2, 3, 4, 8, 12, 17, 18, 19, 35, 37], "pleas": [2, 6, 10, 39, 40, 41, 42, 43], "refer": [2, 3, 10, 12, 17, 18, 19, 29, 32, 37, 39, 40, 43], "kgloss": [2, 19, 37], "kgcompletionbas": 2, "input_dropout": [2, 38], "loss_nam": [2, 38], "distmultlay": [2, 38], "input_graph": [2, 3, 4, 6, 38], "e1_emb": [2, 38], "rel_emb": [2, 38], "all_node_emb": [2, 38], "multi_label": [2, 38], "graph_attribut": [2, 8, 42], "b": [2, 17, 24, 26, 32, 38, 40], "n": [2, 3, 6, 10, 18, 23, 24, 25, 26, 32, 37, 38, 40], "p_score": [2, 19, 37], "n_score": [2, 19, 37], "l_p": 2, "l_n": 2, "kgcompletionlayerbas": 2, "inp_drop": 2, "dropout": [2, 4, 24, 25, 26, 38, 40], "mm": [2, 8], "weight": [2, 8, 9, 23, 24, 25, 26, 32, 35, 37, 38], "transpos": [2, 8], "1": [2, 3, 4, 6, 7, 8, 9, 10, 12, 14, 18, 19, 23, 26, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 40, 41, 42], "softmarginloss": [2, 19, 37], "label": [2, 3, 4, 32, 33, 37, 38, 39, 41, 42], "number": [2, 3, 4, 7, 18, 19, 23, 24, 25, 26, 28, 30, 32, 35, 37, 38, 39], "select": [2, 26, 32, 37, 38], "pred": [2, 38, 39, 41, 42], "tanh": 2, "sigmoid": [2, 17, 18, 19, 37, 38], "idxs_po": 2, "nonzero": [2, 17], "pred_po": [2, 38], "idxs_neg": 2, "pred_neg": [2, 38], "propos": 2, "simpl": [2, 4, 17, 18, 19, 38], "text": [2, 9, 10, 12, 19, 25, 32, 35, 37], "re": [2, 12, 33], "e_r": 2, "bar": 2, "e_t": 2, "sum_": [2, 23, 24, 25, 38], "k": [2, 7, 10, 35, 37, 38, 39, 42], "c": [2, 32, 37, 39, 40, 43], "denot": [2, 10, 24, 25], "real": [2, 38], "part": [2, 3, 4, 6, 18, 19, 39], "code": [2, 9, 10, 12, 17, 18, 19, 24, 25, 26, 28, 31, 39], "below": [2, 3, 4, 6, 8, 9, 10, 18, 23, 26, 40], "end": [2, 25, 26], "gcn": [2, 26, 42], "pytorch": [2, 6, 7, 10, 12, 17, 18, 19, 24, 30, 32, 37, 39, 40], "graph_embed": [2, 40], "classif": [2, 3, 19, 37], "kg_complet": [2, 38, 39], "init": [2, 9, 39, 40, 42], "xavier_normal_": 2, "gcndistmult": [2, 39], "arg": [2, 12, 35, 37], "num_ent": [2, 39], "num_rel": [2, 39], "num_lay": [2, 4, 23, 24, 25, 26, 38, 40], "2": [2, 3, 4, 6, 7, 8, 9, 10, 12, 14, 17, 19, 23, 29, 30, 31, 32, 33, 35, 38, 39, 41, 42, 43], "emb_": 2, "embedding_dim": [2, 18], "padding_idx": [2, 18], "emb_rel": 2, "direction_opt": [2, 23, 24, 25, 26, 39, 40, 42], "feat_drop": [2, 23, 24, 25, 26, 40, 42], "input_drop": [2, 39], "data": [2, 5, 8, 11, 12, 13, 17, 18, 23, 24, 30, 31, 33, 35, 38, 39, 40, 41, 42], "e1": [2, 32, 39], "rel": [2, 10, 32, 35, 38, 39], "kg_graph": [2, 39], "x": [2, 19, 25, 32, 37, 38], "longtensor": [2, 9], "rang": [2, 3, 4, 8, 9, 10, 12, 17, 18, 23, 24, 25, 26, 28, 29, 30, 32, 39, 40, 41, 42], "devic": [2, 8, 9, 18, 25, 32, 40, 41, 42], "node_feat": [2, 8, 9, 23, 24, 25, 26, 29, 30], "e1_embed": 2, "rel_embed": 2, "squeez": [2, 9, 17], "normal": [3, 4, 8, 24, 26], "observ": [3, 4, 37], "nlp": [3, 4, 7, 8, 18, 31, 35, 40], "extract": [3, 7, 10, 12, 35, 38], "amr": 3, "pars": [3, 10, 18, 32, 35, 40], "process": [3, 4, 6, 7, 10, 13, 17, 25, 30, 31, 32, 33, 34, 35, 37, 38, 39, 42], "whether": [3, 12, 23, 24, 25, 26, 32, 33, 35, 37, 38], "between": [3, 6, 7, 10, 17, 19, 24, 30, 35, 37], "pair": [3, 8, 38], "learnt": [3, 4], "both": [3, 4, 6, 8, 9, 10, 12, 17, 18, 23, 24, 25, 26, 30, 31, 32, 35, 38, 42], "low": [3, 4, 12, 23, 26, 41, 42], "easili": [3, 4, 17, 23, 26], "defin": [3, 4, 6, 7, 8, 10, 12, 17, 23, 24, 25, 26, 32, 35, 41, 42], "besid": [3, 4, 12, 23, 24, 26], "support": [3, 4, 6, 7, 8, 9, 10, 17, 23, 26, 27, 29, 31, 32, 38, 41, 42], "three": [3, 10, 26, 42], "popularli": [3, 4], "name": [3, 4, 9, 12, 13, 26, 30, 32, 33, 38, 39, 40], "feedforward": [3, 4], "two": [3, 4, 6, 8, 10, 13, 14, 17, 18, 19, 25, 29, 30, 32, 37, 38], "first": [3, 7, 8, 9, 10, 12, 13, 17, 18, 23, 24, 25, 26, 30, 32, 38, 39, 42], "concaten": [3, 9, 12, 38, 40], "output": [3, 4, 6, 8, 9, 12, 17, 18, 19, 23, 24, 26, 32, 33, 34, 35, 37, 38], "legit": [3, 4], "after": [3, 4, 10, 13, 17, 18, 26, 29, 30], "index": [3, 4, 9, 10, 17, 30, 31, 32, 37, 38], "tupl": [3, 9, 32, 35, 38], "need": [3, 4, 7, 13, 23, 24, 25, 26, 28, 30, 32, 33, 34, 38, 39, 41, 42, 43], "If": [3, 4, 10, 12, 13, 25, 26, 32, 33, 34, 35, 37, 38, 40, 43], "how": [3, 17, 18, 19, 25, 26, 27, 29, 32, 40], "concatfeedforwardnnlay": [3, 38], "linkpredictionlayerbas": 3, "build": [3, 4, 10, 12, 17, 28, 31, 32, 35], "ffnn_all1": 3, "ffnn_all2": 3, "As": [3, 8, 9, 17, 24, 25, 26, 40], "shown": [3, 8, 9, 18, 24, 25, 26, 31, 40], "abov": [3, 8, 13, 26, 32, 33], "feed": [3, 18, 38], "just": [3, 30, 41], "make": [3, 4, 23, 25, 26, 29, 30], "wai": [3, 12, 29, 30], "could": [3, 6, 10, 26, 37, 39], "ani": [3, 25, 30, 32, 37, 38], "successfulli": 3, "implementt": 3, "get": [3, 4, 10, 12, 13, 18, 26, 32, 35, 42], "result": [3, 6, 7, 10, 17, 26, 34, 38], "login": 3, "specif": [3, 6, 17, 18, 19, 24, 30, 32, 34, 35, 38, 39, 43], "edge_idx": [3, 7, 12, 38], "element": [3, 4, 7, 8, 12, 17, 18, 19, 32, 37, 38], "src_idx": 3, "tuple_idx": 3, "dst_idx": 3, "num_nod": [3, 32], "node_emb": [3, 4, 8, 23, 24, 25, 26, 30, 32, 33, 38, 41, 42], "shape": [3, 4, 8, 17, 18, 25, 29, 30, 32, 37, 38, 39, 42], "node_idx_list": 3, "idx": [3, 6, 17, 28, 29, 30], "view": [3, 7, 10, 32, 35], "repeat": 3, "final": [3, 4, 6, 7, 17, 19, 23, 26, 40, 43], "src_emb": 3, "dst_emb": 3, "sourc": [3, 7, 12, 17, 18, 32, 35, 38, 39], "ffnn": 3, "destin": 3, "fused_emb": 3, "cat": [3, 9, 17, 18, 23, 24, 25, 26, 42], "pipelin": [3, 4, 31, 40], "applic": [3, 4, 18, 31, 32], "also": [3, 4, 7, 8, 17, 23, 25, 26, 29, 31, 32, 42], "where": [3, 4, 7, 8, 13, 18, 23, 25, 28, 30, 31, 32, 33, 37, 39, 43], "store": [3, 4, 7, 13, 23, 26, 30, 32, 33, 38, 42], "field": [3, 4, 23, 26, 37, 38, 39], "edge_logit": [3, 38], "here": [3, 18, 24, 26, 38, 39, 41, 42, 43], "mention": 3, "updat": [3, 23, 24, 25, 26, 32], "sum": [3, 8, 9, 17, 19, 37, 38, 39, 40], "oper": [3, 4, 6, 8, 23, 26, 28, 29, 32, 37], "elementsumlay": [3, 38], "construct": [3, 4, 12, 27, 30, 32, 33, 35, 40, 41, 42], "other": [3, 12, 25, 28, 30], "aggreg": [3, 24, 25, 26], "step": [3, 4, 6, 7, 10, 12, 13, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42], "similar": [3, 8, 9, 12, 13, 17, 32], "them": [3, 6, 7, 12, 17, 18, 26, 29, 30, 32, 33], "ffnn_all": 3, "scr_emb": 3, "same": [3, 10, 12, 19, 24, 25, 26, 37, 38], "design": [3, 12, 17, 19, 30, 32, 37], "product": 3, "stackedelementprodlay": [3, 38], "num_channel": [3, 38], "indic": [3, 7, 9, 30, 32, 34, 37, 38], "mani": [3, 18], "channel": [3, 38], "togeth": 3, "sever": [3, 4, 6, 7, 8, 12, 19, 30], "edge_emb": [3, 30], "channel_idx": 3, "situat": [3, 26], "node_emb_": [3, 38], "either": [3, 4, 24, 37], "origin": [3, 4, 7, 9, 10, 13, 17, 18, 28, 32, 35], "singl": [3, 4, 9, 17, 24, 25, 28, 32, 35, 37, 42], "sequenc": [4, 5, 9, 10, 14, 17, 18, 38], "recognit": 4, "bilstm": [4, 9, 42], "anoth": [4, 29, 30], "combin": [4, 8, 35, 37, 43], "add": [4, 6, 7, 8, 9, 10, 18, 24, 29, 30, 32, 35, 37, 42], "addit": [4, 7, 8, 9, 10, 12, 17, 32, 35, 37], "last": [4, 9, 32], "directli": [4, 12, 17, 18], "lstm": [4, 9, 17, 26, 38, 40, 41], "th": [4, 6, 7, 24], "nodeclassifierlayerbas": 4, "output_s": [4, 18, 23, 24, 25, 26, 38, 40], "bidirect": [4, 6, 23, 24, 25, 26, 35], "batch_first": [4, 26], "next": [4, 8, 9, 17, 19, 26, 29, 30, 39, 42], "node_idx": [4, 7, 12, 38], "batch_siz": [4, 17, 18, 37, 38, 39, 40, 41, 42], "init_hidden": [4, 38], "lstm_out": 4, "lstm_feat": 4, "categoriei": 4, "do": [4, 6, 10, 11, 12, 18, 29, 30, 32, 35, 38, 39, 40, 41, 42, 43], "node_emb_pad": 4, "len_emb": 4, "bilstm_emb": 4, "reshap": 4, "batch_node_featur": [4, 8, 9, 32], "node_logit": [4, 38], "module_seq": 4, "layer_idx": 4, "len": [4, 6, 8, 9, 10, 12, 17, 18, 28, 39, 40, 41, 42], "str": [4, 10, 13, 32, 33, 35, 37, 38], "linear_end": 4, "sequenti": [4, 7, 9, 17, 29, 35], "collect": [4, 12, 28, 31, 32], "ordereddict": 4, "int": [4, 8, 23, 24, 26, 29, 32, 34, 35, 37, 38, 40], "valu": [4, 10, 12, 23, 24, 25, 26, 30, 32, 34, 35, 37, 38, 39], "new_emb_new": 4, "requir": [4, 12, 38, 39, 43], "nodeclassifierbas": 4, "structur": [5, 6, 8, 10, 18, 27, 32, 35, 40], "out": [5, 6, 10, 12, 17, 18, 35, 38, 42], "depend": [5, 10, 25, 32, 33, 35, 37, 39, 40, 41, 42], "constitu": [5, 32, 33, 35, 41, 42], "ie": [5, 32, 33, 35, 42], "dynam": [5, 32, 33, 35, 40, 41, 42], "wide": [6, 7, 18, 28], "static": [6, 8, 12, 32, 33, 35, 40, 41, 42], "abl": 6, "captur": [6, 7, 8], "phrase": 6, "syntact": [6, 7, 40], "sentenc": [6, 7, 8, 10, 12, 35, 38], "assembli": 6, "correspond": [6, 8, 10, 12, 17, 18, 25, 30, 31, 32, 39], "word": [6, 7, 8, 9, 10, 12, 17, 18, 35, 38, 42], "thu": 6, "insight": 6, "grammat": 6, "devid": [6, 7], "follow": [6, 7, 10, 13, 17, 18, 23, 24, 25, 26, 28, 29, 31, 32, 33, 37, 39, 41, 42, 43], "paragraph": [6, 7, 10], "extern": 6, "parser": [6, 35], "corenlp": [6, 7, 10, 35, 40], "With": 6, "tree": [6, 7, 14, 32, 35, 38, 40], "subgraph": [6, 7, 10], "raw": [6, 7, 9, 10, 11, 12, 13, 32, 33, 35], "textual": [6, 7, 10], "graph_construct": [6, 7, 10, 17, 32, 40], "constituency_graph_construct": 6, "constituencybasedgraphconstruct": [6, 35, 41, 42], "stanfordcorenlp": [6, 7, 10, 35, 40], "raw_data": [6, 7, 10], "jame": [6, 7, 10], "went": [6, 7], "corner": [6, 7], "shop": [6, 7, 10], "And": [6, 12, 17, 18, 26], "bought": 6, "some": [6, 10, 11, 13, 30, 32, 37], "egg": [6, 10], "nlp_parser": [6, 7, 10, 35], "http": [6, 7, 10, 37, 40, 43], "localhost": [6, 7, 10], "port": [6, 7, 10, 12, 32, 33, 40, 42], "9000": [6, 7, 10, 12, 32, 33, 40, 42], "timeout": [6, 7, 10, 12, 32, 40, 42], "300000": [6, 7, 10], "processor_arg": [6, 7, 10, 35], "annot": [6, 7, 10, 35], "token": [6, 7, 9, 10, 12, 17, 18, 32, 33, 35, 37, 39, 42], "ssplit": [6, 7, 10], "po": [6, 10, 35], "splithyphen": [6, 7, 10], "normalizeparenthes": [6, 7, 10], "normalizeotherbracket": [6, 7, 10], "whitespac": [6, 7, 10], "isonesent": [6, 7, 10], "outputformat": [6, 7, 10], "json": [6, 7, 10, 35], "topologi": [6, 7, 8, 10, 12, 32, 35, 41, 42], "merge_strategi": [6, 7, 10, 12, 33, 35, 40, 41, 42], "edge_strategi": [6, 7, 10, 12, 33, 35, 40, 41], "verbas": [6, 7], "figur": [6, 8, 10, 13, 18, 31], "load": [6, 10, 11, 12, 13, 39, 41, 42], "cl": [6, 7, 10, 42], "raw_text_data": [6, 7, 10, 35], "nlp_processor": [6, 7, 10, 35], "strip": [6, 9, 10, 12, 40], "replac": [6, 10, 39, 43], "lb": 6, "rb": 6, "properti": [6, 10, 12, 13, 32, 33], "corenlp_timeout_signatur": [6, 10], "timeouterror": [6, 10], "item": [6, 8, 9, 10, 12, 30, 32, 39, 40, 41, 42], "skip": [6, 10], "check": [6, 10, 12, 13], "chang": [6, 10], "threshold": [6, 10], "parsed_output": 6, "ad": [6, 29, 30, 32], "instruct": [6, 41, 42], "unidirect": [6, 23, 24, 35], "connect": [6, 7, 8, 10, 24, 28, 29, 35, 38], "sequential_link": [6, 7, 35, 40], "3": [6, 7, 8, 12, 19, 29, 30, 31, 32, 33, 35, 37, 38, 39, 40, 41], "insid": [6, 35], "adjac": [6, 7, 8, 23, 32, 35], "hierarch": [6, 40], "complic": 6, "therefor": [6, 30], "root": [6, 12, 13, 32, 35, 40], "default": [6, 12, 32, 33, 34, 35, 37, 38], "No": [6, 35], "speech": 6, "degre": [6, 35], "_cut_line_nod": 6, "idx_to_be_delet": 6, "new_edg": 6, "enumer": [6, 7, 10, 39, 40, 41, 42], "node_attribut": [6, 7, 9, 12, 17, 18, 30, 32, 35], "edge_arr": 6, "get_all_edg": [6, 28, 29, 32], "cnt_in": 6, "cnt_out": 6, "out_": 6, "in_": 6, "res_graph": 6, "id_map": 6, "cnt_node": 6, "add_nod": [6, 7, 28, 29, 30, 32, 39], "get_node_num": [6, 7, 9, 12, 28, 29, 32], "add_edg": [6, 7, 28, 29, 32, 39], "sinc": [6, 7, 10, 12, 32, 39, 43], "onli": [6, 7, 10, 12, 17, 30, 32, 37, 38, 40, 43], "individu": [6, 7, 10, 12, 32], "multipl": [6, 7, 9, 10, 12, 18, 35, 37], "current": [6, 7, 10, 26, 29, 30, 38, 43], "tailhead": [6, 7, 12, 33, 35, 40, 42], "tail": [6, 7, 35], "head": [6, 7, 23, 24, 26, 35, 38, 42], "user_defin": [6, 7, 10, 33, 35], "suggest": [6, 7, 10], "strategi": [6, 7, 9, 14, 33, 35, 38], "overrid": [6, 7, 10, 12, 35, 37], "_graph_connect": [6, 7, 10, 35], "newconstituencygraphconstruct": 6, "nx_graph_list": [6, 7, 35], "differ": [7, 14, 17, 18, 24, 25, 26, 30, 31, 32, 37, 38], "semant": [7, 18], "variou": [7, 8, 10, 12, 17, 19, 33, 37, 41, 42], "tool": [7, 35], "stanford": [7, 40], "mai": [7, 10, 12, 13, 28, 29, 30], "convert": [7, 9, 12, 24, 25, 26, 28, 29, 32, 35], "concret": [7, 39, 43], "big": 7, "classmethod": [7, 35, 42], "parsed_result": [7, 35], "sub_graph": 7, "sent_id": [7, 10], "parsed_s": 7, "_construct_static_graph": [7, 35], "joint_graph": [7, 35], "dependency_graph_construct": [7, 17, 32], "dependencybasedgraphconstruct": [7, 17, 32, 35, 40, 41, 42], "deppars": 7, "dict": [7, 10, 32, 35, 38], "node_num": [7, 32, 35], "node_cont": [7, 35], "graph_cont": [7, 35], "constrcut": 7, "previou": [7, 25], "control": 7, "ret_graph": 7, "node_object": 7, "parsed_object": [7, 35], "id": [7, 32, 35, 38], "position_id": [7, 35], "sentence_id": [7, 35], "accord": [7, 13, 18, 19, 24, 25, 26, 32, 34, 37], "There": [7, 10, 17, 26], "down": 7, "homogen": [7, 33, 35, 40], "heterogen": [7, 17, 35], "bipartit": [7, 10], "special": 7, "drop": [7, 35], "preserv": [7, 10, 35], "note": [7, 9, 17, 19, 30, 32, 33, 35, 37, 38, 43], "edge_attribut": [7, 12, 32, 35, 39], "kei": [7, 10, 12, 29, 30, 31, 32, 33, 35, 39], "as_nod": [7, 10, 33, 35, 40], "whose": [7, 10, 30, 32, 35], "j": [7, 10, 18, 23, 24, 25, 26, 28, 35, 39], "insert": [7, 10, 35], "dep_info": 7, "src": [7, 28, 29, 32, 35], "tgt": [7, 12, 17, 19, 28, 29, 32, 35, 41, 42], "edge_id": [7, 32, 39], "edge_typ": [7, 35], "info": [7, 35], "notimplementederror": [7, 12, 41], "_": [7, 8, 10, 17, 24, 25, 39, 41, 42], "seq": 7, "subseteq": 7, "basic": [7, 8, 10, 12, 29, 30, 32], "w_i": 7, "w_": [7, 24, 25], "enabl": 7, "newdependencygraphconstruct": 7, "unlik": 8, "dure": [8, 13, 37, 38], "preprocess": [8, 11, 12, 39, 40, 41, 42], "jointli": 8, "fly": 8, "ultim": 8, "goal": 8, "optim": [8, 19, 31, 37, 39, 40, 41, 42], "certain": [8, 17, 18], "point": 8, "stand": [8, 18, 30, 40], "document": [8, 10, 34], "metric": [8, 19, 39, 41, 42], "aim": [8, 9, 10, 23, 40], "wise": [8, 24], "fulli": [8, 38], "sparsif": 8, "spars": [8, 32, 38], "initi": [8, 9, 12, 13, 17, 18, 24, 25, 30, 32, 33, 35, 38, 42], "avail": [8, 42], "choos": [8, 38, 40], "implicit": 8, "better": [8, 9, 30], "introduc": [8, 9, 23, 26], "built": [8, 31, 39, 40, 41, 42], "let": [8, 26, 39, 41, 42], "talk": 8, "share": [8, 33, 38], "approach": [8, 18, 19, 37], "method": [8, 12, 27, 30, 32, 33, 34, 35, 37, 38, 42], "later": [8, 43], "embeddingconstruct": 8, "instanc": [8, 9, 11, 12, 27, 28, 29, 30, 38], "graphconstructionbas": [8, 33], "ones": [8, 28, 29], "compute_similarity_metr": 8, "space": 8, "creat": [8, 12, 19, 37, 40], "weighted_cosin": [8, 40], "attent": [8, 22, 37, 38, 39, 40, 41, 43], "rbf_kernel": 8, "node_mask": 8, "sim_metric_typ": [8, 40, 42], "linear_sim": 8, "node_vec_t": 8, "matmul": 8, "expand_weight_tensor": 8, "unsqueez": 8, "node_vec_norm": 8, "p": [8, 17, 18, 40, 41, 42], "gat_attent": 8, "linear_sims1": 8, "a_input1": 8, "a_input2": 8, "linear_sims2": 8, "leakyrelu": [8, 23], "dist_weight": 8, "_compute_distance_matrix": 8, "exp": [8, 19, 37], "5": [8, 19, 28, 30, 32, 38, 40], "precision_inv_di": 8, "cosin": 8, "div": 8, "norm": [8, 19, 26, 37, 40, 42], "keepdim": 8, "detach": [8, 17, 19, 41], "__version__": [8, 39, 43], "masked_fill_": 8, "mask_off_v": 8, "bool": [8, 32, 33, 35, 37, 38], "sparsify_graph": 8, "knn": 8, "epsilon": 8, "adj": [8, 32], "epsilon_neigh": [8, 40, 42], "_build_epsilon_neighbourhood": 8, "top_k_neigh": [8, 40, 42], "_build_knn_neighbourhood": 8, "compute_graph_regular": 8, "regular": [8, 23, 26, 42], "term": 8, "smooth": [8, 39], "sparsiti": 8, "graph_reg": [8, 42], "smoothness_ratio": [8, 40, 42], "l": [8, 19, 23, 24, 25, 26], "diagflat": 8, "trace": [8, 17], "np": [8, 12, 39, 40, 41, 42], "prod": 8, "connectivity_ratio": [8, 40, 42], "ones_vec": 8, "log": [8, 19, 34, 35, 37], "very_small_numb": 8, "sparsity_ratio": [8, 40, 42], "pow": 8, "nodeembeddingbasedgraphconstruct": [8, 35, 41, 42], "inherit": [8, 12, 41, 42], "aforement": 8, "logic": 8, "token_id": [8, 9, 12, 17], "vocab": [8, 9, 12, 17, 18, 33, 35, 38, 39, 41, 42], "pad": [8, 9, 25, 30, 32, 37, 38, 41], "raw_adj": 8, "min": [8, 9, 12, 17], "must": [8, 12, 17, 18, 23, 24, 37, 38], "non": [8, 18, 37, 40], "clamp": [8, 9], "finfo": 8, "float32": 8, "ep": 8, "reverse_adj": 8, "float": [8, 18, 34, 35, 37, 38, 39], "normalize_adj": 8, "softmax": [8, 17, 18, 19, 37, 38], "convert_adj_to_graph": 8, "util": [8, 10, 12, 17, 18, 23, 26, 30, 39, 40], "intrins": 8, "potenti": 8, "still": 8, "carri": 8, "rich": [8, 26, 31], "laplacian": 8, "nodeembeddingbasedrefinedgraphconstruct": [8, 35, 41, 42], "init_norm_adj": 8, "alpha_fus": [8, 35], "floattensor": 8, "being": [9, 30, 32, 37], "consum": 9, "subsequ": 9, "piec": [9, 35], "w2v": [9, 42], "w2v_bilstm": [9, 40, 42], "w2v_bigru": 9, "bert": [9, 42], "bert_bilstm": 9, "bert_bigru": 9, "w2v_bert": 9, "w2v_bert_bilstm": 9, "w2v_bert_bigru": 9, "emb_strategi": [9, 35, 40, 42], "word_emb_typ": 9, "single_token_item": [9, 35, 40, 42], "node_edge_emb_strategi": 9, "seq_bert": 9, "seq_info_encode_strategi": 9, "bigru": 9, "node_edge_bert": 9, "word2vec": [9, 42], "whole": [9, 10, 13, 18, 27, 30, 31, 32, 35, 38, 39], "assum": [9, 26], "order": [9, 18, 30, 32, 38], "reserv": [9, 12, 30, 33], "compar": [9, 17, 30], "instead": [9, 37], "fed": [9, 13], "batch_gd": [9, 42], "word_emb_lay": [9, 17, 42], "word_feat": 9, "dropout_fn": 9, "word_dropout": [9, 40, 42], "shared_ax": 9, "train": [9, 12, 13, 28, 32, 33, 37, 38, 39, 40, 41, 42], "new_feat": 9, "gd_list": 9, "raw_token": 9, "gd": 9, "bert_feat": 9, "bert_dropout": 9, "seq_info_encode_lay": 9, "rnn_state": [9, 38], "_batch_num_nod": 9, "isinst": [9, 18, 23, 24], "input_data": 9, "split": [9, 10, 12, 32, 33, 40, 41], "node_edge_bert_feat": 9, "node_token_len": 9, "node_edge_emb_lay": 9, "split_featur": [9, 32], "wordembed": [9, 17, 42], "meanembed": 9, "simpli": [9, 12], "rnnembed": 9, "rnn": [9, 14, 18, 38, 41], "gru": [9, 25, 38], "bertembed": 9, "hug": 9, "face": 9, "transform": [9, 17], "have": [9, 10, 12, 19, 26, 30, 32, 35, 40, 43], "limit": [9, 30, 38], "maxim": [9, 38], "length": [9, 32, 37, 38], "automatical": 9, "cut": [9, 10], "long": [9, 10, 12, 18, 19, 25, 29, 30, 39], "small": [9, 13, 28], "chunk": 9, "automt": 9, "merg": [9, 28, 33, 35], "show": [9, 10, 18, 27, 28, 29, 39, 40, 43], "max_seq_len": 9, "doc_strid": 9, "stride": 9, "idea": 9, "convnet": 9, "state": [9, 19, 25, 31, 37, 38, 39], "find": [9, 10, 26, 39], "work": [9, 12, 13, 17, 18], "practic": [9, 12, 28], "learnabl": [9, 23, 24, 25, 26], "paramet": [9, 19, 23, 24, 25, 26, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42], "uncas": [9, 42], "500": [9, 42], "250": 9, "fix_emb": [9, 17, 42], "lower_cas": [9, 12, 32, 33, 35], "bert_max_seq_len": 9, "bert_doc_strid": 9, "bertmodel": 9, "berttoken": 9, "print": [9, 35, 39, 40, 41, 42, 43], "pretrain": 9, "bert_token": 9, "from_pretrain": 9, "do_lower_cas": 9, "bert_model": 9, "fix": [9, 42], "eval": [9, 39, 40, 41, 42], "param": [9, 32, 38, 39, 42], "requires_grad": [9, 19, 40, 41, 42], "finetun": 9, "logits_bert_lay": 9, "xavier_uniform_": 9, "config": [9, 17, 18, 35, 39, 42, 43], "num_hidden_lay": 9, "among": [10, 35], "natur": [10, 12, 18, 31, 40], "divid": [10, 18, 37], "corefer": 10, "resolut": 10, "co": 10, "open": [10, 19, 37], "procedur": 10, "express": [10, 18], "noun": 10, "pronoun": 10, "he": 10, "person": 10, "bui": 10, "processor": [10, 35], "standford": 10, "pron": 10, "resolv": 10, "coref_json": 10, "props_coref": 10, "coref": 10, "coref_dict": 10, "necessari": 10, "sent_dict": 10, "tokenword": 10, "sent": 10, "sentnum": 10, "start": [10, 14, 18, 31, 38, 40, 41], "senttext": 10, "join": [10, 12, 13, 41, 42], "ent_text": 10, "too": 10, "ent_sentnum": 10, "appear": [10, 12, 29, 35, 38], "ent_startindex": 10, "startindex": 10, "ent_endindex": 10, "endindex": 10, "pron_text": 10, "continu": 10, "pron_sentnum": 10, "pron_startindex": 10, "pron_endindex": 10, "rm_idx": 10, "filter": [10, 24, 25, 39], "lambda": 10, "resolvedtext": 10, "second": [10, 17, 30], "leverag": 10, "well": 10, "known": [10, 39], "system": [10, 12, 43], "openi": 10, "n_i": [10, 38], "r_": [10, 24], "n_j": 10, "all_sent_tripl": 10, "resolved_s": 10, "openie_json": 10, "props_openi": 10, "openie_dict": 10, "triple_dict": 10, "sbj": 10, "wa": [10, 39], "were": [10, 19, 37], "obj": 10, "ha": [10, 12, 18, 31, 37, 38], "longer": 10, "tsep": 10, "all_sent_triples_list": [10, 35], "ie_graph_construct": 10, "iebasedgraphconstruct": [10, 12, 35, 42], "lemma": 10, "ner": 10, "strict": 10, "global": [10, 35, 42], "global_nod": [10, 35], "newiebasedgraphconstruct": 10, "triple_list": 10, "easi": [11, 19, 31, 37], "interfac": [11, 19, 27, 28, 29, 30, 31], "manag": 11, "templat": [11, 40], "workflow": 11, "download": [11, 13, 32, 33, 39, 40, 41, 42], "iter": [11, 12, 13], "dataload": [11, 12, 13, 39, 40, 41, 42], "custom": [11, 31, 32, 33, 35, 41, 42], "your": [11, 17, 18, 32, 33, 35, 40, 41, 42, 43], "own": [11, 41, 42], "thing": [12, 30, 39, 41, 42], "know": 12, "arbitrari": [12, 30, 32], "languag": [12, 31, 32, 40], "string": [12, 30, 34, 35, 37], "guid": 12, "job": [12, 17, 18, 29, 30, 32, 41], "walk": [12, 27], "reader": [12, 29], "through": [12, 27, 32, 35], "abstract": [12, 32], "text2textdataset": [12, 32], "text2textdataitem": [12, 32], "its": [12, 18, 24, 25, 32], "compos": [12, 35], "input_text": [12, 32], "output_text": [12, 32], "share_vocab": [12, 32, 33, 40, 41], "input_token": 12, "tokenized_token": 12, "output_token": 12, "jobsdataset": [12, 17, 33, 41], "root_dir": [12, 32, 33, 39, 40, 41, 42], "topology_build": [12, 32, 33, 40, 41, 42], "topology_subdir": [12, 13, 32, 33, 39, 40, 41, 42], "pretrained_word_emb_fil": 12, "pretrained_word_emb_nam": [12, 32, 33, 40, 41, 42], "6b": [12, 33], "pretrained_word_emb_url": [12, 32, 33, 40], "pretrained_word_emb_cache_dir": [12, 32, 33, 40, 41], "graph_typ": [12, 40, 41, 42], "seed": [12, 32, 33, 39, 40, 41, 42], "word_emb_s": [12, 33, 40, 41, 42], "300": [12, 18, 33, 40, 42], "thread_numb": [12, 32, 33, 40, 41, 42], "dynamic_graph_typ": [12, 40, 41, 42], "dynamic_init_topology_build": [12, 32, 33, 35, 40, 41, 42], "dynamic_init_topology_aux_arg": [12, 32, 33, 35, 41, 42], "for_infer": [12, 32, 33], "reused_vocab_model": [12, 32, 33], "file": [12, 13, 32, 33, 39], "found": [12, 37], "save": [12, 13, 19, 39, 41, 42], "decompos": [12, 28], "miss": 12, "raw_file_nam": [12, 32, 33], "val": [12, 32, 33, 39, 40, 41, 42], "test": [12, 28, 29, 32, 33, 39, 40, 41, 42, 43], "txt": 12, "raw_dir": [12, 13, 32, 33], "path": [12, 13, 32, 33, 41, 42], "_download": [12, 13], "raw_path": 12, "raw_file_path": [12, 32, 33], "makedir": [12, 41], "exist_ok": [12, 41], "abc": [12, 15, 20], "abstractmethod": 12, "internet": [12, 32, 33], "sub": [12, 13, 18, 33, 35], "except": [12, 29, 39], "ratio": [12, 38], "otherwis": [12, 19, 32, 35, 37], "pre": [12, 13, 39, 42], "build_topologi": [12, 32], "build_vocab": [12, 32], "_process": [12, 13], "processed_path": 12, "processed_file_path": [12, 32, 33], "val_split_ratio": [12, 33], "__dict__": 12, "userwarn": 12, "disk": [12, 32], "might": 12, "alreadi": [12, 30], "been": [12, 18, 38], "processed_file_nam": [12, 32, 33], "processed_dir": [12, 13, 32, 33], "read_raw_data": [12, 32], "data_to_sav": 12, "vocab_to_sav": 12, "vocab_model": [12, 17, 18, 39, 40, 41, 42], "bind": 12, "routin": [12, 13], "involv": [12, 32], "graphconstruct": 12, "independ": [12, 32], "done": [12, 39], "concurr": 12, "multiprocess": 12, "python": [12, 39, 40, 43], "vocabulari": [12, 17, 18, 32, 33, 35, 38, 41, 42], "By": [12, 37], "vocabmodel": [12, 35, 38], "vocab_util": 12, "respons": 12, "itself": [12, 29], "becom": [12, 32], "member": 12, "lookup": 12, "ascii": 12, "charact": 12, "assign": 12, "overridden": 12, "data_item": [12, 32], "bound": [12, 32, 33], "attribut": [12, 26, 29, 32, 33, 35, 38], "total": [12, 40], "res_l": 12, "start_index": 12, "end_index": 12, "apply_async": 12, "_build_topology_process": 12, "close": 12, "use_val_for_vocab": [12, 32], "valid": [12, 32], "data_for_vocab": 12, "saved_vocab_fil": 12, "data_set": 12, "max_word_vocab_s": [12, 32, 33], "min_word_vocab_freq": [12, 32, 33, 40], "target_pretrained_word_emb_nam": [12, 32], "target_pretrained_word_emb_url": [12, 32], "use_i": 12, "token_matrix": [12, 17, 18], "node_token": [12, 18], "node_token_id": 12, "in_word_vocab": [12, 17, 39, 40, 42], "getindex": [12, 17], "arrai": [12, 39], "pad_2d_vals_no_s": 12, "dtype": [12, 18, 19, 25, 29, 30], "pass": [12, 17, 18, 23, 24, 25, 26, 32], "edge_token_matrix": 12, "get_edge_num": [12, 25, 32], "edge_token": 12, "edge_token_id": 12, "edge_featur": [12, 24, 25, 26, 28, 29, 30, 32], "tgt_token_id": 12, "out_word_vocab": [12, 17, 39, 40, 41], "to_index_sequ": 12, "eo": 12, "output_np": 12, "runtim": [12, 31], "fetch": 12, "want": [12, 29, 30], "collate_fn": [12, 32, 39, 40, 41, 42], "staticmethod": 12, "data_list": [12, 32], "graph_data": [12, 40, 41, 42], "to_batch": [12, 28, 32, 40], "output_numpi": 12, "deepcopi": [12, 17, 18], "output_str": [12, 41], "lower": [12, 35, 38], "output_pad": 12, "tgt_seq": [12, 17, 38, 41], "from_numpi": [12, 18], "expect": [12, 28, 32, 33], "interest": [12, 19, 29, 39], "usag": [12, 32], "experi": 13, "onlin": 13, "access": [13, 29, 30, 32], "memori": [13, 32, 38], "slice": [13, 32], "describ": [13, 38], "typic": [13, 24, 25, 27], "4": [13, 18, 19, 29, 30, 31, 32, 39, 40, 41, 42], "illustr": [13, 29, 31], "convent": 13, "pyg": 13, "under": [13, 31], "directori": [13, 32, 33], "similarli": [13, 23, 24], "On": [13, 28, 29, 30], "trigger": 13, "remain": 13, "reduc": [13, 37], "section": [14, 17, 24, 25, 26, 29], "abcd": [16, 21], "solut": [17, 40], "howev": [17, 29], "focu": 17, "stdrnndecod": [17, 18, 38], "adopt": [17, 18], "soft": 17, "align": 17, "give": [17, 18, 35], "dataset": [17, 18, 39, 40, 41, 42], "get_basic_arg": [17, 18, 40], "graph2seq": [17, 19, 37, 39, 41], "config_util": [17, 18, 39, 40], "update_valu": [17, 18, 40], "get_yaml_config": [17, 18, 39, 40], "dec_word_emb": [17, 18], "pretrained_word_emb": [17, 42], "fix_word_emb": [17, 40, 42], "attention_typ": [17, 38, 40], "uniform": [17, 18, 38, 40], "seq_decod": 17, "rnn_type": [17, 38, 40], "max_decoder_step": [17, 37, 38, 40], "50": [17, 18, 28, 38, 39], "fuse_strategi": [17, 38, 40], "use_coverag": [17, 19, 37, 38, 40, 41], "use_copi": [17, 18, 38, 40, 41], "1024": [17, 32], "rnn_emb_input_s": [17, 38, 40], "graph_pooling_strategi": [17, 38, 40], "word_emb": [17, 38, 42], "ground": [17, 34, 37, 39], "truth": [17, 34, 37, 39], "batch_graph": [17, 18, 38, 40, 41], "enhanc": [17, 18], "help": [17, 18], "w": [17, 18, 23, 24, 26, 32], "p_": [17, 18], "gen": [17, 18], "pointer": [17, 18, 38], "technic": [17, 18], "mini": [17, 18, 37], "full": [17, 18, 31, 38, 39, 40, 41, 42], "oov": [17, 18], "pick": [17, 18], "unk_index": 17, "oov_dict": [17, 18, 38, 40, 41], "unk": 17, "as_tupl": 17, "cpu": [17, 32, 39, 40, 41, 42, 43], "numpi": [17, 39, 40], "unk_token": [17, 18], "_add_word": 17, "token_matrix_oov": 17, "clone": [17, 32, 40, 43], "token_id_oov": 17, "prepare_ext_vocab": [17, 41], "condit": [17, 18], "probabl": [17, 18, 37, 38], "discret": [17, 18], "snippet": [17, 18, 28], "pgen_collect": [17, 18], "dec_emb": [17, 18], "attn_ptr": [17, 18], "prob_ptr": [17, 18], "ptr": [17, 18], "prob_gen": [17, 18], "gen_output": [17, 18], "decoder_output": [17, 18], "ret": [17, 18], "need_pad_length": [17, 18], "get_vocab_s": [17, 18], "new_zero": [17, 18, 25], "ptr_output": [17, 18], "dec_attn_scor": [17, 18], "scatter_add_": [17, 18], "src_seq": [17, 18, 38], "distribut": [17, 18], "dictionari": [17, 18, 30, 32], "machin": 17, "ignor": [17, 37], "past": 17, "histori": 17, "maintain": 17, "keep": [17, 30, 35], "prevent": 17, "focus": 17, "un": [17, 28], "backward": [17, 39, 40, 41, 42], "propag": [17, 24, 25], "enc_attn_weight": [17, 19, 37, 41], "coverage_vector": [17, 19, 37, 38, 41], "target_length": 17, "coverage_loss": [17, 37], "cover_loss": [17, 37], "coverageloss": [17, 37], "graph2seqloss": [17, 41], "nllloss": [17, 18, 19, 37], "mathbf": [17, 24, 25], "attend": [17, 38], "leav": 17, "futur": 17, "calcul": [17, 19, 34, 37, 38], "kind": [17, 18], "case": [17, 35, 37, 39], "fuse": [17, 24, 38, 42], "sep_diff_encoder_typ": [17, 38], "firstli": [17, 18, 40], "group": [17, 41], "secondli": 17, "sep_diff_node_typ": [17, 38], "node_type_num": [17, 38], "amount": [17, 35, 38], "math": [18, 19, 23, 26], "problem": [18, 19, 37], "mathemat": [18, 40], "main": [18, 19], "df": [18, 34], "depth": [18, 38], "search": [18, 31, 38], "bf": 18, "breadth": 18, "mainli": 18, "stdtreedecod": [18, 38], "jobsdatasetfortre": [18, 33], "tree_util": [18, 40], "treebaseddecod": 18, "tgt_tree_batch": [18, 38], "out_vocab": 18, "_weight": 18, "attn_typ": [18, 38], "enc_hidden_s": [18, 38], "dec_emb_s": [18, 33, 38, 40], "dec_hidden_s": [18, 38], "vocab_s": [18, 37, 38], "criterion": [18, 19, 37, 38], "ignore_index": [18, 19, 37, 41], "reduct": [18, 37], "teacher_force_ratio": [18, 38], "max_dec_seq_length": [18, 38], "max_dec_tree_depth": [18, 38], "tgt_vocab": [18, 38, 40], "subtre": 18, "termin": [18, 40], "top": [18, 41], "bottom": 18, "get_dec_batch": 18, "dec_tree_batch": [18, 40], "form_manag": 18, "queue_tre": 18, "parent": [18, 38], "child_index": 18, "cur_index": 18, "max_index": 18, "dec_batch": 18, "while": [18, 26, 35], "max_w_len": 18, "batch_w_list": 18, "w_list": 18, "ic": 18, "num_children": 18, "children": 18, "zero": [18, 25, 29, 30, 32, 39], "get_symbol_idx": 18, "to_cuda": 18, "sibl": [18, 38], "auxiliari": [18, 35], "s1": 18, "s2": 18, "branch": 18, "descend": [18, 39], "rough": 18, "break": [18, 39, 41, 42], "maximum": 18, "allow": 18, "emploi": 18, "mechan": [18, 23, 37, 38, 40, 41], "overal": 18, "graph2tre": [18, 40], "explain": 18, "go": [18, 39, 40], "src_vocab": [18, 40], "add_symbol": 18, "evolv": 19, "These": [19, 30], "deriv": 19, "precis": [19, 39], "recal": 19, "f1": 19, "accuraci": [19, 40, 41, 42], "ground_truth": [19, 34, 41, 42], "calculate_scor": [19, 34, 41, 42], "micro": 19, "6": [19, 30, 39], "bleu": [19, 34], "bleutransl": 19, "sacrebleu": 19, "cider": [19, 34], "meteor": [19, 34], "roug": [19, 34], "summarizationroug": 19, "pyroug": 19, "bleu_metr": 19, "n_gram": [19, 34], "am": [19, 35], "phd": 19, "student": 19, "she": 19, "wrap": 19, "cross": [19, 37], "entropi": [19, 37], "coverag": [19, 37, 38, 41], "seq2seq": 19, "seq_generation_loss": 19, "seqgenerationloss": [19, 37], "loss_funct": 19, "graph2seq_loss": [19, 37], "art": [19, 31, 37], "kge": [19, 37], "pointwis": [19, 37], "mseloss": [19, 37], "measur": [19, 37], "squar": [19, 37], "error": [19, 37], "l2": [19, 37, 39], "y": [19, 37], "wrapper": 19, "logist": [19, 37], "sampl": [19, 32, 37], "overfit": [19, 37], "sum_i": [19, 37], "frac": [19, 24, 37, 38], "nelement": [19, 37], "openk": [19, 37], "toolkit": [19, 37], "adv_temperatur": [19, 37], "softplu": 19, "adv_flag": 19, "get_weight": 19, "logsigmoid": 19, "binari": [19, 23, 32, 37, 38], "kg_loss": 19, "loss_typ": [19, 37], "m": [19, 26, 38], "randn": [19, 29, 30], "empti": [19, 29, 30], "random_": 19, "nll": [19, 37], "bce": [19, 37], "bcewithlogit": [19, 37], "bcewithlogitsloss": [19, 37], "multilabelmargin": [19, 37], "multilabelmarginloss": [19, 37], "softmargin": [19, 37], "crossentropi": [19, 37, 42], "general_loss": 19, "generalloss": [19, 37, 42], "convolut": 22, "graphsag": [22, 40, 42], "gate": 22, "architectur": [23, 31], "messag": [23, 24, 25, 26], "version": [23, 24, 26, 30, 32, 37, 39, 40, 42], "bisep": [23, 26], "bifus": [23, 26], "h_i": 23, "alpha_": 23, "h_j": 23, "ij": [23, 24], "bewteen": 23, "mathrm": [23, 25, 26], "softmax_i": 23, "vec": 23, "h_": [23, 24, 25, 26], "regist": [23, 24, 25, 26], "submodul": [23, 24, 25, 26], "gnnbase": [23, 24, 25, 26], "bi_sep": [23, 24, 25, 26, 39, 42], "attn_drop": [23, 40, 42], "negative_slop": [23, 42], "residu": [23, 24, 42], "allow_zero_in_degre": [23, 24], "gat_lay": 23, "modulelist": [23, 24, 25, 26], "due": [23, 24, 26, 43], "num_head": [23, 24, 26, 40, 42], "dimens": [23, 24, 30, 37, 38], "One": [23, 38], "undirect": [23, 24, 25, 26, 40, 42], "bi_fus": [23, 24, 25, 39], "doe": [23, 24, 25, 26, 32, 37, 42], "actual": [23, 24, 25, 26, 32], "back": [23, 26], "dgl_graph": [23, 24, 25], "to_dgl": [23, 24, 25, 26, 29, 32], "h": [23, 24, 25, 26, 38], "flatten": [23, 24], "felxbibl": [23, 26], "gnnlayerbas": [23, 24, 25, 26], "warn": 23, "undirectedgatlayerconv": 23, "bisepgatlayerconv": 23, "bifusegatlayerconv": 23, "spectral": 24, "A": [24, 25, 32, 35, 37], "rule": 24, "theori": 24, "sigma": [24, 26], "tild": 24, "trainabl": 24, "cdot": [24, 26], "gcn_norm": 24, "use_edge_weight": [24, 25, 26, 40, 42], "gcn_layer": 24, "direct": [24, 25, 26, 30, 32], "callabl": [24, 32, 35], "undirectedgcnlayerconv": 24, "bisepgcnlayerconv": 24, "bifusegcnlayerconv": 24, "reset": [24, 25, 26], "upat": [24, 25], "formul": [24, 25], "vdash": [24, 25], "c_": 24, "dashv": [24, 25], "convei": [24, 25], "separ": [24, 25, 32, 38], "invalid": [24, 30], "But": 24, "got": [24, 32], "_input_s": [24, 25], "_output_s": [24, 25], "_gcn_norm": 24, "_allow_zero_in_degre": 24, "_feat_drop": 24, "weight_fw": 24, "weight_bw": 24, "register_paramet": 24, "bias_fw": 24, "bias_bw": 24, "res_fc_fw": 24, "res_fc_bw": 24, "ident": 24, "register_buff": 24, "reset_paramet": [24, 25, 26], "_activ": 24, "fuse_linear": 24, "res_fc": 24, "rest": [24, 25, 26], "deep": [24, 25, 26, 28, 31], "dive": [24, 25, 26], "obatin": [24, 25, 26], "dgl": [24, 25, 26, 29, 31, 32], "dglgraph": [24, 25, 26, 29, 32], "expand": [24, 25, 26], "edge_weight": [24, 25, 26, 30], "reverse_edge_weight": [24, 25, 26], "recurr": 25, "biggest": 25, "modif": [25, 32], "unit": [25, 38], "consider": 25, "v_j": 25, "t_": 25, "f_": 25, "summar": 25, "_i": 25, "a_": 25, "_1": 25, "_n": 25, "dn": 25, "2dn": 25, "commun": 25, "2d": [25, 32, 37], "column": [25, 32, 39], "block": [25, 31], "eq": [25, 28, 29], "eqref": 25, "extra": 25, "equal": [25, 37, 38], "via": [25, 27], "incom": 25, "outgo": 25, "incorpor": 25, "timestep": 25, "n_etyp": 25, "integ": 25, "simila": 25, "gcnlayer": 25, "bisepggnnlayerconv": 25, "x_i": 25, "_n_etyp": 25, "linears_in": 25, "linears_out": 25, "gru_in": 25, "grucel": 25, "gru_out": 25, "etyp": 25, "zero_pad": 25, "feat_in": 25, "feat_out": 25, "induct": 26, "larg": [26, 28, 32], "dimension": [26, 37], "especi": 26, "foral": 26, "concat": 26, "aggregator_typ": [26, 40], "graphsage_lay": 26, "larger": [26, 38], "than": [26, 37, 38], "transfer": 26, "nlpgraph": 26, "put": [26, 32], "direct_opt": 26, "undirectedgraphsagelayerconv": 26, "u": 26, "see": [26, 38], "in_feat": 26, "out_feat": 26, "_in_src_feat": 26, "_in_dst_feat": 26, "expand_as_pair": 26, "_out_feat": 26, "_aggre_typ": 26, "fc_pool": 26, "fc_self": 26, "fc_neigh": 26, "srcdata": 26, "feat_src": 26, "update_al": 26, "fn": 26, "copy_src": 26, "_lstm_reduc": 26, "edata": [26, 29], "u_mul_": 26, "h_neigh": 26, "dstdata": 26, "neigh": 26, "rst": 26, "h_self": 26, "dataflow": 27, "manipul": [27, 29], "you": [27, 29, 32, 33, 38, 39, 40, 43], "lifecycl": 27, "improv": [28, 40], "effici": [28, 31], "unbatch": [28, 38], "hand": [28, 29, 30], "g_list": 28, "batched_edg": 28, "graph_edges_list": 28, "10": [28, 29, 30, 32, 39, 40, 41, 43], "target_batch_idx": 28, "behavior": 28, "9": [29, 30, 32, 38, 39, 43], "19": 29, "line": [29, 31, 32, 33, 35, 39, 41, 42, 43], "attach": [29, 30], "suitabl": [29, 37], "from_dgl": [29, 32], "from_dense_adj": [29, 32], "from_scipy_sparse_matrix": [29, 32], "from_graphdata": [29, 32], "edge_feat": [29, 30], "dgl_g": [29, 32], "node_feat_nam": 29, "node_feature_nam": [29, 32], "ndata": 29, "edge_feat_nam": 29, "get_edge_feature_nam": [29, 32], "number_of_nod": 29, "all_edg": 29, "dgl_g_edg": 29, "g1": 29, "try": 29, "typeerror": [29, 32], "node_index": 30, "altern": 30, "exact": 30, "match": [30, 32, 39, 43], "sizemisatcherror": 30, "2053": 30, "9236": 30, "4437": 30, "7142": 30, "5309": 30, "5863": 30, "6002": 30, "6847": 30, "3772": 30, "1066": 30, "8875": 30, "7674": 30, "0354": 30, "7681": 30, "6256": 30, "3399": 30, "3798": 30, "7418": 30, "2901": 30, "6641": 30, "5530": 30, "9147": 30, "0618": 30, "0879": 30, "0005": 30, "2638": 30, "4481": 30, "2975": 30, "0304": 30, "8707": 30, "3448": 30, "7484": 30, "0194": 30, "5096": 30, "2596": 30, "1056": 30, "1560": 30, "3463": 30, "1986": 30, "9243": 30, "3555": 30, "7062": 30, "0459": 30, "1305": 30, "1338": 30, "2952": 30, "2923": 30, "5740": 30, "5492": 30, "2497": 30, "7125": 30, "2456": 30, "2136": 30, "8562": 30, "8037": 30, "0379": 30, "6863": 30, "2693": 30, "1980": 30, "3153": 30, "4099": 30, "8295": 30, "6984": 30, "4125": 30, "8396": 30, "8205": 30, "1458": 30, "0837": 30, "2388": 30, "0552": 30, "4068": 30, "9334": 30, "0367": 30, "3297": 30, "0705": 30, "5606": 30, "0458": 30, "1358": 30, "3042": 30, "8282": 30, "7764": 30, "1442": 30, "6043": 30, "1052": 30, "4648": 30, "1791": 30, "6740": 30, "2858": 30, "0482": 30, "9058": 30, "5054": 30, "8992": 30, "0893": 30, "2325": 30, "8888": 30, "2222": 30, "0569": 30, "0218": 30, "5519": 30, "8234": 30, "7": [30, 39, 40], "8": [30, 39, 40, 43], "encourag": 30, "notic": 30, "newli": 30, "0000": 30, "essenti": 30, "up": [30, 39, 40, 41, 42], "node_attr": 30, "edge_attr": 30, "hello": 30, "clear": 30, "subsect": 30, "storag": [30, 32], "numer": [30, 37], "20": [30, 38, 40, 41], "necessarili": 30, "intersect": 31, "dlg4nlp": 31, "scientist": 31, "flexibl": 31, "research": 31, "develop": 31, "upon": 31, "highli": [31, 43], "run": [31, 43], "great": 31, "extens": 31, "box": 31, "dash": 31, "alsoflex": 31, "resourc": 31, "materi": 31, "demo": [31, 39, 40, 41, 42], "tutori": 31, "video": 31, "survei": 31, "modular": 31, "comprehens": 31, "quick": 31, "page": 31, "form": 32, "correspondingnod": 32, "batch_edge_featur": 32, "modifi": [32, 33], "split_edge_featur": 32, "split_node_featur": 32, "valueerror": 32, "endpoint": 32, "doesn": 32, "union": 32, "bunch": [32, 39, 41, 42], "don": 32, "adj_matrix": 32, "batch_view": 32, "post_processing_fn": 32, "3d": 32, "matric": [32, 35], "callback": 32, "post": 32, "batchedgefeatview": 32, "batchnodefeatview": 32, "copy_batch_info": 32, "copi": [32, 38, 40, 41], "come": 32, "wrong": 32, "edgenotfoundexcept": 32, "edgeview": 32, "nxn": 32, "entri": 32, "dglheterograph": 32, "coo_matrix": 32, "scipi": 32, "dst": 32, "get_edge_featur": 32, "relev": [32, 39], "num_edg": 32, "get_node_attr": 32, "get_node_featur": 32, "nodefeatview": 32, "fashion": 32, "rand": 32, "1036": 32, "6757": 32, "4702": 32, "8938": 32, "6337": 32, "3290": 32, "6739": 32, "1091": 32, "7996": 32, "0586": 32, "nodeview": 32, "underli": 32, "queri": 32, "remove_all_edg": 32, "remov": 32, "random": [32, 40, 41], "freed": 32, "now": [32, 39], "set_edge_featur": 32, "new_data": 32, "sizemismatchexcept": 32, "set_node_featur": 32, "write": [32, 39, 42], "sparse_adj": 32, "coo": 32, "input_tensor": 32, "n_max": 32, "move": 32, "gpu": [32, 39, 40, 41, 42], "etc": [32, 35], "intend": 32, "word_token": [32, 35], "840b": [32, 33, 42], "vector_cach": [32, 40], "1234": 32, "15000": [32, 40, 42], "organ": [32, 35], "style": [32, 35, 42], "intern": 32, "eas": 32, "suppos": 32, "correspondingli": 32, "shuffl": [32, 39, 40, 41, 42], "consequ": 32, "receiv": 32, "3rd": 32, "process_data_item": [32, 33], "dataitem": 32, "parse_fil": 32, "file_path": 32, "read": 32, "repeatedli": 32, "split_id": [32, 33], "subset": 32, "doubletext2textdataset": 32, "graph_nam": [32, 33], "static_or_dynam": [32, 33], "staticgraphconstructionbas": 32, "dynamicgraphconstructionbas": 32, "dynamic_init_graph_nam": [32, 33], "doubl": 32, "node_emb_refin": [32, 33, 41, 42], "renam": [32, 33], "tbd": [32, 33], "doubletext2textdataitem": 32, "record": 32, "tab": 32, "todo": 32, "languageid0": 32, "input_text2": 32, "kgcompletiondataset": 32, "kgcompletiondataitem": 32, "person100": 32, "e2": [32, 39], "term6": 32, "rel_ev": 32, "e2_multi1": [32, 39], "person90": 32, "person80": 32, "person59": 32, "person82": 32, "person63": 32, "person77": 32, "person85": 32, "person83": 32, "person56": 32, "e2_multi2": [32, 39], "sequencelabelingdataset": 32, "tag_typ": 32, "sequencelabelingdataitem": 32, "tag": 32, "eu": 32, "org": [32, 37, 43], "reject": 32, "german": 32, "misc": 32, "text2labeldataset": 32, "text2labeldataitem": 32, "far": 32, "denver": 32, "aspen": 32, "num": 32, "output_label": 32, "text2treedataset": 32, "text2treedataitem": 32, "decod": [32, 37, 38, 39, 40, 41], "At": 33, "least": [33, 39], "fiil": 33, "enc_emb_s": [33, 40], "tokenize_job": 33, "100000": 33, "geodatasetfortre": 33, "tokenize_geo": 33, "kinshipdataset": [33, 39], "kgc": 33, "mawpsdatasetfortre": [33, 40], "tokenize_mawp": 33, "squaddataset": 33, "regexptoken": 33, "pattern": 33, "gap": 33, "discard_empti": 33, "flag": [33, 35], "unicod": 33, "multilin": 33, "dotal": 33, "trecdataset": [33, 42], "verbos": [34, 35, 42], "correct": 34, "bleu_n": 34, "frequenc": 34, "rubric": 34, "autosummari": 34, "toctre": 34, "numpydoc": 34, "add_vocab": 35, "pack": 35, "eg": 35, "dog": 35, "noqa": [35, 38], "nsubj": 35, "static_topologi": 35, "configur": [35, 40], "linkag": 35, "n_subj": 35, "infor": 35, "embedding_styl": [35, 40, 42], "num_rnn_lay": [35, 40, 42], "bert_model_nam": [35, 40, 42], "bert_lower_cas": [35, 40, 42], "sub_sentence_id": 35, "top_down": 35, "prune": 35, "strcutur": 35, "_graph_connnect": 35, "yet": 35, "leaf": 35, "boolean": [35, 38], "decid": 35, "intermedi": 35, "src_ent": 35, "tgt_ent": 35, "graph_nod": 35, "graphdat": 35, "ent_nod": 35, "edge_nod": 35, "__call__": [35, 37, 38], "dynamic_topologi": 35, "init_topologi": 35, "refin": [35, 42], "fusion": 35, "builder": [35, 41], "nltk": 35, "argument": 35, "coverage_weight": [37, 41], "size_averag": 37, "100": [37, 41], "pos_weight": 37, "backend": [37, 39, 41, 42], "decript": 37, "doc": 37, "stabl": [37, 40], "html": 37, "_modul": 37, "likelihood": 37, "plain": 37, "advantag": 37, "trick": 37, "stabil": 37, "hing": 37, "margin": 37, "crossentropyloss": 37, "logsoftmax": 37, "manual": 37, "rescal": 37, "nbatch": 37, "per": [37, 38], "minibatch": 37, "deprec": 37, "meantim": 37, "paramt": 37, "contribut": 37, "gradient": 37, "d_1": 37, "d_2": 37, "d_k": 37, "geq": 37, "leq": 37, "scalar": 37, "ensur": [37, 39], "tip": 37, "graph_classif": 38, "feedforwardnn": [38, 42], "avgpool": 38, "_k": 38, "complex": [38, 39], "fot": 38, "e1_embedded_r": 38, "rel_embedded_r": 38, "e1_embedded_img": 38, "rel_embedded_img": 38, "all_node_emb_r": 38, "all_node_emb_img": 38, "entity_1": 38, "img": 38, "output_graph": 38, "complexlay": 38, "preidct": 38, "b_p": 38, "b_n": 38, "distmult": [38, 39], "r_r": 38, "link_predict": 38, "concatfeedforwardnn": 38, "catrgoriei": 38, "elementsum": 38, "stackedelementprod": 38, "node_emb_0": 38, "node_classif": 38, "bilstmfeedforwardnn": 38, "bacth": 38, "bilstmfeedforwardnnlay": 38, "use_attent": 38, "attention_funct": 38, "coverage_strategi": 38, "tgt_emb_as_output_lay": 38, "choic": 38, "uniformli": 38, "coverage_funct": 38, "decode_step": 38, "decoder_input": 38, "input_fe": 38, "encoder_out": 38, "dec_input_mask": 38, "rnn_emb": 38, "enc_attn_weights_averag": 38, "mask": 38, "dummi": 38, "extract_param": 38, "_run_forward_pass": 38, "teacher_forcing_r": [38, 40], "teacher": 38, "forc": 38, "rate": [38, 41], "tgt_len": 38, "get_decoder_init_st": 38, "content": 38, "initial_st": 38, "use_s": [38, 40], "dropout_for_decod": 38, "512": 38, "256": 38, "separate_on_encoder_typ": 38, "separate_on_node_typ": 38, "possibl": 38, "upper": 38, "tgt_batch_siz": 38, "dec_single_input": 38, "dec_single_st": 38, "parent_st": 38, "input_mask": 38, "memory_mask": 38, "memory_candid": 38, "sibling_st": 38, "enc_batch": 38, "decoderstrategi": 38, "beam_siz": [38, 40, 41], "decoderbas": 38, "beam": 38, "seach": 38, "tempor": 38, "beam_search_for_tree_decod": 38, "topk": [38, 41], "ggnn": [39, 42], "predictoin": [39, 40, 41, 42], "notebook": [39, 40, 41, 42], "conda": [39, 40], "g4l": 39, "cuda": [39, 40, 41, 42], "torchtext": [39, 43], "reli": [39, 43], "pai": [39, 43], "script": [39, 43], "cu92": [39, 43], "cu101": [39, 43], "cu102": [39, 43], "cu110": [39, 43], "tabl": [39, 43], "command": [39, 43], "11": [39, 43], "platform": 39, "wn18rr": 39, "sh": 39, "argpars": [39, 40], "cudnn": [39, 41, 42], "gcncomplex": 39, "set_printopt": 39, "benchmark": [39, 41, 42], "cfg": 39, "namespac": 39, "ggnn_distmult": 39, "gcn_distmult": 39, "gcn_complex": 39, "e1_tensor": 39, "rel_tensor": 39, "e2_multi": 39, "inference_forward": 39, "collate_data": 39, "post_process": 39, "max_valu": 39, "argsort1": 39, "sort": 39, "rank1": 39, "rank": 39, "implementaion": 39, "ranking_and_hits_thi": 39, "dev_rank_batch": 39, "hits_left": 39, "hits_right": 39, "hit": 39, "ranks_left": 39, "ranks_right": 39, "str2var": 39, "e2_tensor": 39, "rel_revers": 39, "rel_eval_tensor": 39, "pred1": 39, "pred2": 39, "filter1": 39, "filter2": 39, "target_value1": 39, "target_value2": 39, "argsort2": 39, "rank2": 39, "lowest": 39, "elegantli": 39, "hits_level": 39, "reciproc": 39, "loop": [39, 41, 42], "particular": 39, "resum": 39, "model_path": [39, 42], "train_dataload": [39, 41, 42], "num_work": [39, 40, 41, 42], "loader_thread": 39, "val_dataload": [39, 41, 42], "test_dataload": [39, 41, 42], "row": 39, "tolist": 39, "zip": 39, "eid": 39, "pt": [39, 40, 42], "graph_path": 39, "model_param": 39, "total_param_s": 39, "numel": 39, "count": 39, "load_state_dict": [39, 41], "test_evalu": 39, "dev_evalu": 39, "best_mrr": 39, "opt": [39, 40, 41], "adam": [39, 40, 41, 42], "lr": [39, 40, 41, 42], "weight_decai": [39, 40], "epoch": [39, 40, 41, 42], "zero_grad": [39, 40, 41, 42], "e2_multi1_binari": 39, "label_smooth": 39, "train_batch": 39, "no_grad": [39, 41, 42], "dev_mrr": 39, "best": [39, 40, 41, 42], "state_dict": [39, 41], "get_arg": [39, 40], "task_arg": 39, "task_config": 39, "model_nam": 39, "hidden_drop": 39, "saved_model": 39, "manual_se": [39, 40, 41, 42], "uni": 39, "40": 39, "39": 39, "38": 39, "88": 39, "mrr": 39, "54": 39, "53": 39, "closer": 40, "look": 40, "automat": 40, "reason": 40, "descript": 40, "explor": 40, "abil": 40, "mwp": 40, "pictur": 40, "evalu": [40, 41, 42], "mawp": 40, "virtual": 40, "instal": 40, "github": 40, "repo": 40, "git": [40, 43], "com": [40, 43], "graph4ai": [40, 43], "cd": [40, 43], "bat": [40, 43], "window": [40, 43], "program": [40, 43], "ask": [40, 43], "py": [40, 43], "unnecessari": 40, "becaus": 40, "folder": 40, "server": 40, "java": 40, "mx4g": 40, "cp": 40, "edu": 40, "stanfordcorenlpserv": 40, "dataset_yaml": 40, "yaml": 40, "learning_r": [40, 41], "1e": 40, "gpuid": 40, "123": 40, "init_weight": 40, "08": 40, "max_epoch": 40, "min_freq": 40, "grad_clip": 40, "checkpoint_save_path": [40, 41], "checkpoint_sav": 40, "our_arg": 40, "graph_construction_nam": 40, "graph_embedding_nam": 40, "decoder_nam": 40, "to_arg": 40, "from_args_list": 40, "cfg_g2t": 40, "pprint": 40, "decoder_arg": [40, 41], "rnn_decoder_priv": 40, "35": 40, "max_tree_depth": 40, "use_input_fe": 40, "rnn_decoder_shar": [40, 41], "stdtree": 40, "graph_construction_arg": [40, 41], "graph_construction_priv": [40, 41], "graph_construction_shar": [40, 41], "dependencygraph": 40, "node_embed": 40, "05": 40, "fix_bert_emb": [40, 42], "rnn_dropout": [40, 42], "graph_embedding_arg": 40, "graph_embedding_priv": 40, "graph_embedding_shar": 40, "001": 40, "tqdm": 40, "prepare_oov": 40, "convert_to_str": 40, "compute_tree_accuraci": 40, "use_share_vocab": 40, "data_dir": 40, "_build_dataload": [40, 41, 42], "_build_model": [40, 41, 42], "_build_optim": [40, 41, 42], "para_d": 40, "train_data_load": 40, "test_data_load": 40, "valid_data_load": 40, "from_arg": [40, 41], "optim_st": 40, "learningr": 40, "train_epoch": [40, 41], "loss_to_print": 40, "num_batch": 40, "desc": 40, "02d": 40, "batch_tree_list": 40, "batch_original_tree_list": 40, "original_dec_tree_batch": 40, "batch_tree_list_refin": 40, "tgt_list": 40, "get_symbol_idx_for_list": 40, "tgt_tree": 40, "convert_to_tre": 40, "clip_grad_value_": 40, "best_acc": 40, "best_model": 40, "nstart": 40, "train_loss": [40, 42], "3f": [40, 41], "15": 40, "val_acc": [40, 42], "mode": [40, 42], "save_checkpoint": [40, 41], "reference_list": 40, "candidate_list": 40, "data_load": 40, "eval_input_graph": 40, "eval_vocab": 40, "candid": 40, "use_beam_search": 40, "num_left_paren": 40, "idx2symbol": 40, "num_right_paren": 40, "diff": 40, "symbol2idx": 40, "ref_str": 40, "cand_str": 40, "eval_acc": 40, "78": 40, "bi": [41, 42], "sep": 41, "gat": [41, 42], "scenario": [41, 42], "text2label": [41, 42], "sequence2label": [41, 42], "text2text": [41, 42], "text2tre": [41, 42], "doubletext2text": [41, 42], "_build_devic": [41, 42], "_build_loss_funct": 41, "_build_evalu": [41, 42], "use_gpu": 41, "is_avail": [41, 42], "manual_seed_al": [41, 42], "dynamic_init_graph_typ": 41, "trec": [41, 42], "expressionaccuraci": 41, "max_scor": 41, "_best_epoch": 41, "_adjust_lr": 41, "pth": 41, "_stop_condit": 41, "patienc": [41, 42], "set_lr": 41, "decay_factor": 41, "param_group": 41, "epoch_diff": 41, "lr_start_decay_epoch": 41, "lr_decay_per_epoch": 41, "min_lr": 41, "lr_decay_r": 41, "adjust": 41, "5f": 41, "loss_collect": 41, "step_all_train": 41, "gt_str": 41, "prob": 41, "loss_display_step": 41, "pred_collect": [41, 42], "gt_collect": [41, 42], "ref_dict": 41, "argmax": 41, "pred_str": 41, "wordid2str": 41, "pred_id": 41, "load_checkpoint": [41, 42], "checkpoint_nam": 41, "checkpoint_path": 41, "runner": [41, 42], "test_scor": 41, "21": 41, "938": 41, "506": 41, "000": 41, "845": 41, "487": 41, "198": 41, "104": 41, "major": [42, 43], "builti": 42, "bidirectin": 42, "textclassifi": 42, "label_model": 42, "graph_topologi": 42, "num_hidden": 42, "no_fix_word_emb": 42, "no_fix_bert_emb": 42, "gl_metric_typ": 42, "gl_num_head": 42, "gl_top_k": 42, "gl_epsilon": 42, "gl_smoothness_ratio": 42, "gl_connectivity_ratio": 42, "gl_sparsity_ratio": 42, "gl_num_hidden": 42, "init_adj_alpha": 42, "embedding_lay": 42, "gat_num_head": 42, "gnn_num_lay": 42, "gat_num_out_head": 42, "gnn_direction_opt": 42, "gnn_dropout": 42, "gat_attn_dropout": 42, "gat_negative_slop": 42, "gat_residu": 42, "elu": 42, "graphsage_aggreagte_typ": 42, "clf": 42, "max_pool_linear_proj": 42, "require_loss": 42, "modelhandl": 42, "logger": 42, "out_dir": 42, "overwrit": 42, "no_cuda": 42, "determinist": 42, "init_graph_typ": 42, "_graph": 42, "root_data_dir": 42, "dummy_param": 42, "hasattr": 42, "num_train": 42, "num_val": 42, "num_test": 42, "stopper": 42, "earlystop": 42, "constant": 42, "_saved_weights_fil": 42, "schedul": 42, "reducelronplateau": 42, "lr_reduce_factor": 42, "lr_patienc": 42, "dur": 42, "train_acc": 42, "t0": 42, "tgt_tensor": 42, "zero_divis": 42, "2f": 42, "4f": 42, "acc": 42, "best_scor": 42, "restor": 42, "save_model_path": 42, "test_acc": 42, "graphsage_bi_fuse_dependency_ckpt_1628651059": 42, "35833": 42, "map": 42, "dependency_graph": 42, "5452": 42, "14": 42, "28": 42, "1777": 42, "5249": 42, "7740": 42, "13": 42, "17": 42, "6613": 42, "7596": 42, "8280": 42, "os": 43, "linux": 43, "ubuntu": 43, "18": 43, "04": 43, "maco": 43, "wheel": 43, "recommend": 43, "compat": 43, "ok": 43, "pypi": 43, "packag": 43, "setup": 43, "enjoi": 43}, "objects": {"graph4nlp.data": [[32, 0, 0, "-", "data"], [32, 0, 0, "-", "dataset"]], "graph4nlp.data.data": [[32, 1, 1, "", "GraphData"], [32, 4, 1, "", "to_batch"]], "graph4nlp.data.data.GraphData": [[32, 2, 1, "", "add_edge"], [32, 2, 1, "", "add_edges"], [32, 2, 1, "", "add_nodes"], [32, 2, 1, "", "adj_matrix"], [32, 3, 1, "", "batch_edge_features"], [32, 3, 1, "", "batch_node_features"], [32, 2, 1, "", "copy_batch_info"], [32, 3, 1, "", "edge_attributes"], [32, 3, 1, "", "edge_features"], [32, 2, 1, "", "edge_ids"], [32, 3, 1, "", "edges"], [32, 2, 1, "", "from_dense_adj"], [32, 2, 1, "", "from_dgl"], [32, 2, 1, "", "from_graphdata"], [32, 2, 1, "", "from_scipy_sparse_matrix"], [32, 2, 1, "", "get_all_edges"], [32, 2, 1, "", "get_edge_feature"], [32, 2, 1, "", "get_edge_feature_names"], [32, 2, 1, "", "get_edge_num"], [32, 2, 1, "", "get_node_attrs"], [32, 2, 1, "", "get_node_features"], [32, 2, 1, "", "get_node_num"], [32, 3, 1, "", "node_attributes"], [32, 2, 1, "", "node_feature_names"], [32, 3, 1, "", "node_features"], [32, 3, 1, "", "nodes"], [32, 2, 1, "", "remove_all_edges"], [32, 2, 1, "", "set_edge_feature"], [32, 2, 1, "", "set_node_features"], [32, 2, 1, "", "sparse_adj"], [32, 2, 1, "", "split_features"], [32, 2, 1, "", "to"], [32, 2, 1, "", "to_dgl"]], "graph4nlp.data.dataset": [[32, 1, 1, "id0", "Dataset"], [32, 1, 1, "", "DoubleText2TextDataset"], [32, 1, 1, "", "KGCompletionDataset"], [32, 1, 1, "", "SequenceLabelingDataset"], [32, 1, 1, "id18", "Text2LabelDataset"], [32, 1, 1, "", "Text2TextDataset"], [32, 1, 1, "", "Text2TreeDataset"]], "graph4nlp.data.dataset.Dataset": [[32, 2, 1, "id9", "build_topology"], [32, 2, 1, "id10", "build_vocab"], [32, 2, 1, "id11", "collate_fn"], [32, 2, 1, "id12", "download"], [32, 2, 1, "id13", "parse_file"], [32, 3, 1, "id14", "raw_dir"], [32, 3, 1, "id15", "raw_file_paths"], [32, 2, 1, "id16", "read_raw_data"], [32, 2, 1, "id17", "vectorization"]], "graph4nlp.data.dataset.DoubleText2TextDataset": [[32, 2, 1, "", "collate_fn"], [32, 2, 1, "", "parse_file"], [32, 2, 1, "", "vectorization"]], "graph4nlp.data.dataset.KGCompletionDataset": [[32, 2, 1, "", "build_topology"], [32, 2, 1, "", "build_vocab"], [32, 2, 1, "", "collate_fn"], [32, 2, 1, "", "parse_file"], [32, 2, 1, "", "read_raw_data"], [32, 2, 1, "", "vectorization"]], "graph4nlp.data.dataset.SequenceLabelingDataset": [[32, 2, 1, "", "build_vocab"], [32, 2, 1, "", "collate_fn"], [32, 2, 1, "", "parse_file"], [32, 2, 1, "", "vectorization"]], "graph4nlp.data.dataset.Text2LabelDataset": [[32, 2, 1, "id19", "build_vocab"], [32, 2, 1, "id20", "collate_fn"], [32, 2, 1, "id21", "parse_file"], [32, 2, 1, "id22", "vectorization"]], "graph4nlp.data.dataset.Text2TextDataset": [[32, 2, 1, "", "collate_fn"], [32, 2, 1, "", "parse_file"], [32, 2, 1, "", "vectorization"]], "graph4nlp.data.dataset.Text2TreeDataset": [[32, 2, 1, "", "build_vocab"], [32, 2, 1, "", "collate_fn"], [32, 2, 1, "", "parse_file"], [32, 2, 1, "", "vectorization"]], "graph4nlp": [[33, 0, 0, "-", "datasets"], [34, 0, 0, "-", "evaluation"], [35, 0, 0, "-", "graph_construction"], [37, 0, 0, "-", "loss"], [38, 0, 0, "-", "prediction"]], "graph4nlp.datasets": [[33, 1, 1, "", "GeoDatasetForTree"], [33, 1, 1, "", "JobsDataset"], [33, 1, 1, "", "JobsDatasetForTree"], [33, 1, 1, "", "KinshipDataset"], [33, 1, 1, "", "MawpsDatasetForTree"], [33, 1, 1, "", "SQuADDataset"], [33, 1, 1, "", "TrecDataset"]], "graph4nlp.datasets.GeoDatasetForTree": [[33, 2, 1, "", "download"], [33, 3, 1, "", "processed_file_names"], [33, 3, 1, "", "raw_file_names"]], "graph4nlp.datasets.JobsDataset": [[33, 2, 1, "", "download"], [33, 3, 1, "", "processed_file_names"], [33, 3, 1, "", "raw_file_names"]], "graph4nlp.datasets.JobsDatasetForTree": [[33, 2, 1, "", "download"], [33, 3, 1, "", "processed_file_names"], [33, 3, 1, "", "raw_file_names"]], "graph4nlp.datasets.KinshipDataset": [[33, 2, 1, "", "download"], [33, 3, 1, "", "processed_file_names"], [33, 3, 1, "", "raw_dir"], [33, 3, 1, "", "raw_file_names"]], "graph4nlp.datasets.MawpsDatasetForTree": [[33, 2, 1, "", "download"], [33, 3, 1, "", "processed_file_names"], [33, 3, 1, "", "raw_file_names"]], "graph4nlp.datasets.SQuADDataset": [[33, 2, 1, "", "download"], [33, 3, 1, "", "processed_file_names"], [33, 3, 1, "", "raw_file_names"]], "graph4nlp.datasets.TrecDataset": [[33, 2, 1, "", "download"], [33, 3, 1, "", "processed_file_names"], [33, 3, 1, "", "raw_file_names"]], "graph4nlp.evaluation": [[34, 1, 1, "", "BLEU"], [34, 1, 1, "", "CIDEr"], [34, 1, 1, "", "METEOR"], [34, 1, 1, "", "ROUGE"]], "graph4nlp.evaluation.BLEU": [[34, 2, 1, "", "calculate_scores"]], "graph4nlp.evaluation.CIDEr": [[34, 2, 1, "", "calculate_scores"]], "graph4nlp.evaluation.METEOR": [[34, 2, 1, "", "calculate_scores"]], "graph4nlp.evaluation.ROUGE": [[34, 2, 1, "", "calculate_scores"]], "graph4nlp.graph_construction": [[35, 1, 1, "", "ConstituencyBasedGraphConstruction"], [35, 1, 1, "", "DependencyBasedGraphConstruction"], [35, 1, 1, "", "IEBasedGraphConstruction"], [35, 1, 1, "", "NodeEmbeddingBasedGraphConstruction"], [35, 1, 1, "", "NodeEmbeddingBasedRefinedGraphConstruction"]], "graph4nlp.graph_construction.ConstituencyBasedGraphConstruction": [[35, 2, 1, "", "parsing"], [35, 2, 1, "", "static_topology"]], "graph4nlp.graph_construction.DependencyBasedGraphConstruction": [[35, 2, 1, "", "add_vocab"], [35, 2, 1, "", "parsing"], [35, 2, 1, "", "static_topology"]], "graph4nlp.graph_construction.IEBasedGraphConstruction": [[35, 2, 1, "", "add_vocab"], [35, 2, 1, "", "parsing"], [35, 2, 1, "", "static_topology"]], "graph4nlp.graph_construction.NodeEmbeddingBasedGraphConstruction": [[35, 2, 1, "", "dynamic_topology"], [35, 2, 1, "", "init_topology"]], "graph4nlp.graph_construction.NodeEmbeddingBasedRefinedGraphConstruction": [[35, 2, 1, "", "dynamic_topology"], [35, 2, 1, "", "init_topology"]], "graph4nlp.loss": [[37, 1, 1, "", "CoverageLoss"], [37, 1, 1, "", "GeneralLoss"], [37, 1, 1, "", "KGLoss"], [37, 1, 1, "", "SeqGenerationLoss"]], "graph4nlp.loss.CoverageLoss": [[37, 2, 1, "", "forward"]], "graph4nlp.loss.GeneralLoss": [[37, 2, 1, "", "forward"]], "graph4nlp.loss.KGLoss": [[37, 2, 1, "", "forward"]], "graph4nlp.loss.SeqGenerationLoss": [[37, 2, 1, "", "forward"]], "graph4nlp.prediction": [[38, 0, 0, "-", "classification"], [38, 0, 0, "-", "generation"]], "graph4nlp.prediction.classification": [[38, 0, 0, "-", "graph_classification"], [38, 0, 0, "-", "kg_completion"], [38, 0, 0, "-", "link_prediction"], [38, 0, 0, "-", "node_classification"]], "graph4nlp.prediction.classification.graph_classification": [[38, 1, 1, "", "AvgPooling"], [38, 1, 1, "", "FeedForwardNN"]], "graph4nlp.prediction.classification.graph_classification.AvgPooling": [[38, 2, 1, "", "forward"]], "graph4nlp.prediction.classification.graph_classification.FeedForwardNN": [[38, 2, 1, "", "forward"]], "graph4nlp.prediction.classification.kg_completion": [[38, 1, 1, "", "ComplEx"], [38, 1, 1, "", "ComplExLayer"], [38, 1, 1, "", "DistMult"], [38, 1, 1, "", "DistMultLayer"]], "graph4nlp.prediction.classification.kg_completion.ComplEx": [[38, 2, 1, "", "forward"]], "graph4nlp.prediction.classification.kg_completion.ComplExLayer": [[38, 2, 1, "", "forward"]], "graph4nlp.prediction.classification.kg_completion.DistMult": [[38, 2, 1, "", "forward"]], "graph4nlp.prediction.classification.kg_completion.DistMultLayer": [[38, 2, 1, "", "forward"]], "graph4nlp.prediction.classification.link_prediction": [[38, 1, 1, "", "ConcatFeedForwardNN"], [38, 1, 1, "", "ConcatFeedForwardNNLayer"], [38, 1, 1, "", "ElementSum"], [38, 1, 1, "", "ElementSumLayer"], [38, 1, 1, "", "StackedElementProd"], [38, 1, 1, "", "StackedElementProdLayer"]], "graph4nlp.prediction.classification.link_prediction.ConcatFeedForwardNN": [[38, 2, 1, "", "forward"]], "graph4nlp.prediction.classification.link_prediction.ConcatFeedForwardNNLayer": [[38, 2, 1, "", "forward"]], "graph4nlp.prediction.classification.link_prediction.ElementSum": [[38, 2, 1, "", "forward"]], "graph4nlp.prediction.classification.link_prediction.ElementSumLayer": [[38, 2, 1, "", "forward"]], "graph4nlp.prediction.classification.link_prediction.StackedElementProd": [[38, 2, 1, "", "forward"]], "graph4nlp.prediction.classification.link_prediction.StackedElementProdLayer": [[38, 2, 1, "", "forward"]], "graph4nlp.prediction.classification.node_classification": [[38, 1, 1, "", "BiLSTMFeedForwardNN"], [38, 1, 1, "", "BiLSTMFeedForwardNNLayer"], [38, 1, 1, "", "FeedForwardNN"], [38, 1, 1, "", "FeedForwardNNLayer"]], "graph4nlp.prediction.classification.node_classification.BiLSTMFeedForwardNN": [[38, 2, 1, "", "forward"]], "graph4nlp.prediction.classification.node_classification.BiLSTMFeedForwardNNLayer": [[38, 2, 1, "", "forward"]], "graph4nlp.prediction.classification.node_classification.FeedForwardNN": [[38, 2, 1, "", "forward"]], "graph4nlp.prediction.classification.node_classification.FeedForwardNNLayer": [[38, 2, 1, "", "forward"]], "graph4nlp.prediction.generation": [[38, 1, 1, "", "DecoderStrategy"], [38, 1, 1, "", "StdRNNDecoder"], [38, 1, 1, "", "StdTreeDecoder"]], "graph4nlp.prediction.generation.DecoderStrategy": [[38, 2, 1, "", "generate"]], "graph4nlp.prediction.generation.StdRNNDecoder": [[38, 2, 1, "", "decode_step"], [38, 2, 1, "", "extract_params"], [38, 2, 1, "", "forward"], [38, 2, 1, "", "get_decoder_init_state"]], "graph4nlp.prediction.generation.StdTreeDecoder": [[38, 2, 1, "", "decode_step"], [38, 2, 1, "", "forward"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"]}, "titleterms": {"chapter": [0, 5, 11, 14, 17, 18, 19, 22, 27], "6": [0, 43], "classif": [0, 1, 4, 38, 42], "graph": [1, 2, 5, 6, 7, 8, 10, 19, 22, 23, 24, 25, 27, 32, 35, 36, 38, 39], "feedforwardnn": [1, 4], "avgpool": 1, "maxpool": 1, "knowledg": [2, 19, 38, 39], "complet": [2, 38, 39], "distmult": 2, "complex": 2, "how": [2, 6, 7, 10], "combin": 2, "kgc": [2, 39], "decod": [2, 14, 17, 18], "gnn": 2, "encod": [2, 22], "link": [3, 6, 38], "predict": [3, 38], "concatfeedforwardnn": 3, "elementsum": 3, "stackedelementprod": 3, "node": [4, 8, 38], "bilstmfeedforwardnnlay": 4, "bilstmfeedforwardnn": 4, "3": [5, 24, 25], "construct": [5, 6, 7, 8, 9, 10, 23, 24, 25, 26, 29], "roadmap": [5, 14], "constitu": 6, "us": [6, 7, 10], "implement": [6, 18], "detail": [6, 7, 18], "pars": [6, 7, 41], "sub": [6, 7], "sequenti": 6, "prune": 6, "merg": [6, 7, 10], "depend": [7, 43], "The": [7, 40], "specif": 7, "dynam": 8, "dynamicgraphconstructionbas": 8, "embed": [8, 9], "base": [8, 32], "refin": 8, "embeddingconstruct": 9, "variou": 9, "modul": [9, 23, 24, 25, 26], "ie": 10, "strategi": 10, "edg": 10, "2": [11, 18, 24, 25], "dataset": [11, 12, 13, 32, 33], "custom": 12, "your": 12, "own": 12, "dataitem": 12, "download": [12, 43], "process": [12, 18], "batch": [12, 28], "workflow": 13, "5": [14, 17, 18], "thi": [15, 16, 20, 21], "i": [15, 16, 18, 20, 21, 43], "A": [15, 20], "b": [16, 21], "1": [17, 24, 25, 27, 43], "standard": [17, 18], "rnn": 17, "some": 17, "advanc": 17, "mechan": 17, "copi": [17, 18], "coverag": 17, "separ": [17, 18], "attent": [17, 18, 23], "tree": 18, "what": 18, "7": 19, "evalu": [19, 34, 39], "loss": [19, 37], "compon": 19, "sequenc": 19, "gener": [19, 38], "4": [22, 24, 25], "network": [23, 24, 25, 36], "gat": 23, "function": [23, 24, 25, 26], "forward": [23, 24, 25, 26], "gatlay": 23, "convolut": 24, "gcn": 24, "gcnlayer": 24, "gcnlayerconv": 24, "gate": 25, "neural": [25, 36], "ggnn": 25, "ggnnlayer": 25, "ggnnlayerconv": 25, "graphsag": 26, "graphsagelay": 26, "graphsagelayerconv": 26, "data": [27, 32], "graphdata": [29, 30], "from": [29, 43], "scratch": 29, "import": [29, 39, 40], "other": 29, "sourc": [29, 43], "export": 29, "format": 29, "manipul": 30, "featur": 30, "attribut": 30, "v": 30, "graph4nlp": [31, 32, 33, 34, 35, 36, 37, 38, 39, 43], "document": 31, "indic": 31, "tabl": 31, "represent": 32, "class": 32, "task": 32, "level": 32, "all": 33, "metric": 34, "graph_construct": 35, "constructor": 35, "graph_embed": 36, "tutori": [39, 40, 41, 42], "introduct": [39, 40, 41, 42], "environ": [39, 40, 41, 42], "setup": [39, 40, 41, 42], "creat": 39, "virtual": 39, "instal": [39, 43], "librari": 39, "via": [39, 43], "pip": [39, 43], "packag": [39, 40], "build": [39, 40, 41, 42], "model": [39, 40, 41, 42], "defin": 39, "kg": 39, "main": 39, "run": [39, 40, 41, 42], "result": [39, 40], "kinship": 39, "bceloss": 39, "ggnndistmult": 39, "math": 40, "word": 40, "problem": 40, "load": 40, "config": 40, "file": 40, "output": 40, "get": 40, "semant": 41, "handler": [41, 42], "text": 42, "classifi": 42, "binari": 43, "ensur": 43, "least": 43, "pytorch": 43, "0": 43, "find": 43, "cuda": 43, "version": 43, "wa": 43, "gpu": 43, "user": 43, "relev": 43, "support": 43, "platform": 43, "code": 43, "github": 43, "configur": 43}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"Chapter 6. Classification": [[0, "chapter-6-classification"]], "Graph Classification": [[1, "graph-classification"], [38, "module-graph4nlp.prediction.classification.graph_classification"]], "FeedForwardNN": [[1, "feedforwardnn"], [4, "feedforwardnn"]], "AvgPooling": [[1, "avgpooling"]], "MaxPooling": [[1, "maxpooling"]], "Knowledge Graph Completion": [[2, "knowledge-graph-completion"], [38, "module-graph4nlp.prediction.classification.kg_completion"]], "DistMult": [[2, "distmult"]], "ComplEx": [[2, "complex"]], "How to Combine KGC Decoder with GNN Encoder": [[2, "how-to-combine-kgc-decoder-with-gnn-encoder"]], "Link Prediction": [[3, "link-prediction"], [38, "module-graph4nlp.prediction.classification.link_prediction"]], "ConcatFeedForwardNN": [[3, "concatfeedforwardnn"]], "ElementSum": [[3, "elementsum"]], "StackedElementProd": [[3, "stackedelementprod"]], "Node Classification": [[4, "node-classification"], [38, "module-graph4nlp.prediction.classification.node_classification"]], "BiLSTMFeedForwardNNLayer": [[4, "bilstmfeedforwardnnlayer"]], "BiLSTMFeedForwardNN": [[4, "bilstmfeedforwardnn"]], "Chapter 3. Graph Construction": [[5, "chapter-3-graph-construction"]], "Roadmap": [[5, "roadmap"], [14, "roadmap"]], "Constituency Graph Construction": [[6, "constituency-graph-construction"]], "How to use": [[6, "how-to-use"], [7, "how-to-use"], [10, "how-to-use"]], "Implementation details": [[6, "implementation-details"], [18, "implementation-details"]], "Parsing": [[6, "parsing"], [7, "parsing"]], "Sub-graph construction": [[6, "sub-graph-construction"], [7, "sub-graph-construction"]], "Sequential Link": [[6, "sequential-link"]], "Prune": [[6, "prune"]], "Graph merging": [[6, "graph-merging"], [7, "graph-merging"]], "Dependency Graph Construction": [[7, "dependency-graph-construction"]], "The specific details": [[7, "the-specific-details"]], "Dynamic Graph Construction": [[8, "dynamic-graph-construction"]], "DynamicGraphConstructionBase": [[8, "dynamicgraphconstructionbase"]], "Node Embedding Based Dynamic Graph Construction": [[8, "node-embedding-based-dynamic-graph-construction"]], "Node Embedding Based Refined Dynamic Graph Construction": [[8, "node-embedding-based-refined-dynamic-graph-construction"]], "Embedding Construction": [[9, "embedding-construction"]], "EmbeddingConstruction": [[9, "embeddingconstruction"]], "Various embedding modules": [[9, "various-embedding-modules"]], "IE Graph Construction": [[10, "ie-graph-construction"]], "Merge strategy": [[10, "merge-strategy"]], "Edge Strategy": [[10, "edge-strategy"]], "Chapter 2. Dataset": [[11, "chapter-2-dataset"]], "Customizing your own dataset": [[12, "customizing-your-own-dataset"]], "Customizing DataItem": [[12, "customizing-dataitem"]], "Customizing downloading": [[12, "customizing-downloading"]], "Customizing processing": [[12, "customizing-processing"]], "Customizing batching": [[12, "customizing-batching"]], "Dataset workflow": [[13, "dataset-workflow"]], "Chapter 5. Decoder": [[14, "chapter-5-decoder"]], "This is A": [[15, "this-is-a"], [20, "this-is-a"]], "This is B": [[16, "this-is-b"], [21, "this-is-b"]], "Chapter 5.1 Standard RNN Decoder": [[17, "chapter-5-1-standard-rnn-decoder"]], "Some advanced mechanisms": [[17, "some-advanced-mechanisms"]], "Copy and coverage": [[17, "copy-and-coverage"]], "Separate attention": [[17, "separate-attention"]], "Chapter 5.2 Standard Tree Decoder": [[18, "chapter-5-2-standard-tree-decoder"]], "What is the tree decoding process": [[18, "what-is-the-tree-decoding-process"]], "Copy and separate attention": [[18, "copy-and-separate-attention"]], "Chapter 7. Evaluations and Loss components": [[19, "chapter-7-evaluations-and-loss-components"]], "Evaluations": [[19, "evaluations"]], "Loss components": [[19, "loss-components"]], "Sequence generation loss.": [[19, "sequence-generation-loss"]], "Knowledge Graph Loss": [[19, "knowledge-graph-loss"]], "General Loss": [[19, "general-loss"]], "Chapter 4. Graph Encoder": [[22, "chapter-4-graph-encoder"]], "Graph Attention Networks": [[23, "graph-attention-networks"]], "GAT Module Construction Function": [[23, "gat-module-construction-function"]], "GAT Module Forward Function": [[23, "gat-module-forward-function"]], "GATLayer Construction Function": [[23, "gatlayer-construction-function"]], "Graph Convolutional Networks": [[24, "graph-convolutional-networks"]], "4.1.1 GCN Module Construction Function": [[24, "gcn-module-construction-function"]], "4.1.2 GCNLayer Construction Function": [[24, "gcnlayer-construction-function"]], "4.1.3 GCNLayerConv Construction Function": [[24, "gcnlayerconv-construction-function"]], "4.1.4 GCN Forward Function": [[24, "gcn-forward-function"]], "Gated Graph Neural Networks": [[25, "gated-graph-neural-networks"]], "4.2.1 GGNN Module Construction Function": [[25, "ggnn-module-construction-function"]], "4.2.2 GGNNLayer Construction Function": [[25, "ggnnlayer-construction-function"]], "4.2.3 GGNNLayerConv Construction Function": [[25, "ggnnlayerconv-construction-function"]], "4.2.4 GGNN Forward Function": [[25, "ggnn-forward-function"]], "GraphSAGE": [[26, "graphsage"]], "GraphSAGE Module Construction Function": [[26, "graphsage-module-construction-function"]], "GraphSAGE Module Forward Function": [[26, "graphsage-module-forward-function"]], "GraphSAGELayer Construction Function": [[26, "graphsagelayer-construction-function"]], "GraphSAGELayer Forward Function": [[26, "graphsagelayer-forward-function"]], "GraphSAGELayerConv Construction Function": [[26, "graphsagelayerconv-construction-function"]], "GraphSAGELayerConv Forwards Function": [[26, "graphsagelayerconv-forwards-function"]], "Chapter 1. Graph Data": [[27, "chapter-1-graph-data"]], "Batching": [[28, "batching"]], "Constructing GraphData": [[29, "constructing-graphdata"]], "Constructing from scratch": [[29, "constructing-from-scratch"]], "Importing from other sources": [[29, "importing-from-other-sources"]], "Exporting to other formats": [[29, "exporting-to-other-formats"]], "Manipulating GraphData": [[30, "manipulating-graphdata"]], "Features": [[30, "features"]], "Attributes": [[30, "attributes"]], "Features vs. Attributes": [[30, "features-vs-attributes"]], "Graph4NLP Documentation": [[31, "graph4nlp-documentation"]], "Indices and tables": [[31, "indices-and-tables"]], "graph4nlp.data": [[32, "module-graph4nlp.data.data"]], "Graph Representation": [[32, "graph-representation"]], "Base Dataset Class": [[32, "base-dataset-class"]], "Task Level Dataset Base Class": [[32, "task-level-dataset-base-class"]], "graph4nlp.datasets": [[33, "module-graph4nlp.datasets"]], "All Datasets": [[33, "all-datasets"]], "graph4nlp.evaluation": [[34, "module-graph4nlp.evaluation"]], "Evaluation Metrics": [[34, "evaluation-metrics"]], "graph4nlp.graph_construction": [[35, "module-graph4nlp.graph_construction"]], "Graph Constructor": [[35, "graph-constructor"]], "graph4nlp.graph_embedding": [[36, "graph4nlp-graph-embedding"]], "Graph Neural Networks": [[36, "graph-neural-networks"]], "graph4nlp.loss": [[37, "module-graph4nlp.loss"]], "Losses": [[37, "losses"]], "graph4nlp.prediction": [[38, "module-graph4nlp.prediction"]], "Classification": [[38, "module-graph4nlp.prediction.classification"]], "Generation": [[38, "module-graph4nlp.prediction.generation"]], "Knowledge Graph Completion Tutorial": [[39, "knowledge-graph-completion-tutorial"]], "Introduction": [[39, "introduction"], [40, "introduction"], [41, "introduction"], [42, "introduction"]], "Environment setup": [[39, "environment-setup"], [40, "environment-setup"], [41, "environment-setup"], [42, "environment-setup"]], "Create virtual environment": [[39, "create-virtual-environment"]], "Install graph4nlp library via pip": [[39, "install-graph4nlp-library-via-pip"]], "Installation for KGC": [[39, "installation-for-kgc"]], "Import packages": [[39, "import-packages"], [40, "import-packages"]], "Build Model": [[39, "build-model"]], "Define Evaluation for KG Completion": [[39, "define-evaluation-for-kg-completion"]], "Define Main()": [[39, "define-main"]], "Run the model": [[39, "run-the-model"], [41, "run-the-model"], [42, "run-the-model"]], "Results on kinship": [[39, "results-on-kinship"]], "BCELoss+GGNNDistmult": [[39, "id1"]], "Math Word Problem Tutorial": [[40, "math-word-problem-tutorial"]], "Load the config file": [[40, "load-the-config-file"]], "The config output": [[40, "the-config-output"]], "Build the model": [[40, "build-the-model"]], "Run and get results": [[40, "run-and-get-results"]], "Semantic Parsing Tutorial": [[41, "semantic-parsing-tutorial"]], "Build the model handler": [[41, "build-the-model-handler"], [42, "build-the-model-handler"]], "Text Classification Tutorial": [[42, "text-classification-tutorial"]], "Build the text classifier": [[42, "build-the-text-classifier"]], "Install Graph4NLP": [[43, "install-graph4nlp"], [43, "id1"], [43, "id5"]], "Installation via pip (binaries)": [[43, "installation-via-pip-binaries"]], "Ensure that at least PyTorch (>=1.6.0) is installed:": [[43, "ensure-that-at-least-pytorch-1-6-0-is-installed"], [43, "id2"]], "Find the CUDA version PyTorch was installed with (for GPU users):": [[43, "find-the-cuda-version-pytorch-was-installed-with-for-gpu-users"], [43, "id3"]], "Install the relevant dependencies:": [[43, "install-the-relevant-dependencies"], [43, "id4"]], "Supported platforms": [[43, "id6"]], "Installation via source code": [[43, "installation-via-source-code"]], "Download the source code of Graph4NLP from Github:": [[43, "download-the-source-code-of-graph4nlp-from-github"]], "Configure the CUDA version": [[43, "configure-the-cuda-version"]]}, "indexentries": {"dataset (class in graph4nlp.data.dataset)": [[32, "graph4nlp.data.dataset.Dataset"], [32, "id0"]], "doubletext2textdataset (class in graph4nlp.data.dataset)": [[32, "graph4nlp.data.dataset.DoubleText2TextDataset"]], "graphdata (class in graph4nlp.data.data)": [[32, "graph4nlp.data.data.GraphData"]], "kgcompletiondataset (class in graph4nlp.data.dataset)": [[32, "graph4nlp.data.dataset.KGCompletionDataset"]], "sequencelabelingdataset (class in graph4nlp.data.dataset)": [[32, "graph4nlp.data.dataset.SequenceLabelingDataset"]], "text2labeldataset (class in graph4nlp.data.dataset)": [[32, "graph4nlp.data.dataset.Text2LabelDataset"], [32, "id18"]], "text2textdataset (class in graph4nlp.data.dataset)": [[32, "graph4nlp.data.dataset.Text2TextDataset"]], "text2treedataset (class in graph4nlp.data.dataset)": [[32, "graph4nlp.data.dataset.Text2TreeDataset"]], "add_edge() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.add_edge"]], "add_edges() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.add_edges"]], "add_nodes() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.add_nodes"]], "adj_matrix() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.adj_matrix"]], "batch_edge_features (graph4nlp.data.data.graphdata property)": [[32, "graph4nlp.data.data.GraphData.batch_edge_features"]], "batch_node_features (graph4nlp.data.data.graphdata property)": [[32, "graph4nlp.data.data.GraphData.batch_node_features"]], "build_topology() (graph4nlp.data.dataset.dataset method)": [[32, "graph4nlp.data.dataset.Dataset.build_topology"], [32, "id9"]], "build_topology() (graph4nlp.data.dataset.kgcompletiondataset method)": [[32, "graph4nlp.data.dataset.KGCompletionDataset.build_topology"]], "build_vocab() (graph4nlp.data.dataset.dataset method)": [[32, "graph4nlp.data.dataset.Dataset.build_vocab"], [32, "id10"]], "build_vocab() (graph4nlp.data.dataset.kgcompletiondataset method)": [[32, "graph4nlp.data.dataset.KGCompletionDataset.build_vocab"]], "build_vocab() (graph4nlp.data.dataset.sequencelabelingdataset method)": [[32, "graph4nlp.data.dataset.SequenceLabelingDataset.build_vocab"]], "build_vocab() (graph4nlp.data.dataset.text2labeldataset method)": [[32, "graph4nlp.data.dataset.Text2LabelDataset.build_vocab"], [32, "id19"]], "build_vocab() (graph4nlp.data.dataset.text2treedataset method)": [[32, "graph4nlp.data.dataset.Text2TreeDataset.build_vocab"]], "collate_fn() (graph4nlp.data.dataset.dataset static method)": [[32, "graph4nlp.data.dataset.Dataset.collate_fn"], [32, "id11"]], "collate_fn() (graph4nlp.data.dataset.doubletext2textdataset static method)": [[32, "graph4nlp.data.dataset.DoubleText2TextDataset.collate_fn"]], "collate_fn() (graph4nlp.data.dataset.kgcompletiondataset static method)": [[32, "graph4nlp.data.dataset.KGCompletionDataset.collate_fn"]], "collate_fn() (graph4nlp.data.dataset.sequencelabelingdataset static method)": [[32, "graph4nlp.data.dataset.SequenceLabelingDataset.collate_fn"]], "collate_fn() (graph4nlp.data.dataset.text2labeldataset static method)": [[32, "graph4nlp.data.dataset.Text2LabelDataset.collate_fn"], [32, "id20"]], "collate_fn() (graph4nlp.data.dataset.text2textdataset static method)": [[32, "graph4nlp.data.dataset.Text2TextDataset.collate_fn"]], "collate_fn() (graph4nlp.data.dataset.text2treedataset static method)": [[32, "graph4nlp.data.dataset.Text2TreeDataset.collate_fn"]], "copy_batch_info() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.copy_batch_info"]], "download() (graph4nlp.data.dataset.dataset method)": [[32, "graph4nlp.data.dataset.Dataset.download"], [32, "id12"]], "edge_attributes (graph4nlp.data.data.graphdata property)": [[32, "graph4nlp.data.data.GraphData.edge_attributes"]], "edge_features (graph4nlp.data.data.graphdata property)": [[32, "graph4nlp.data.data.GraphData.edge_features"]], "edge_ids() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.edge_ids"]], "edges (graph4nlp.data.data.graphdata property)": [[32, "graph4nlp.data.data.GraphData.edges"]], "from_dense_adj() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.from_dense_adj"]], "from_dgl() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.from_dgl"]], "from_graphdata() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.from_graphdata"]], "from_scipy_sparse_matrix() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.from_scipy_sparse_matrix"]], "get_all_edges() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.get_all_edges"]], "get_edge_feature() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.get_edge_feature"]], "get_edge_feature_names() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.get_edge_feature_names"]], "get_edge_num() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.get_edge_num"]], "get_node_attrs() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.get_node_attrs"]], "get_node_features() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.get_node_features"]], "get_node_num() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.get_node_num"]], "graph4nlp.data.data": [[32, "module-graph4nlp.data.data"]], "graph4nlp.data.dataset": [[32, "module-graph4nlp.data.dataset"]], "module": [[32, "module-graph4nlp.data.data"], [32, "module-graph4nlp.data.dataset"], [33, "module-graph4nlp.datasets"], [34, "module-graph4nlp.evaluation"], [35, "module-graph4nlp.graph_construction"], [37, "module-graph4nlp.loss"], [38, "module-graph4nlp.prediction"], [38, "module-graph4nlp.prediction.classification"], [38, "module-graph4nlp.prediction.classification.graph_classification"], [38, "module-graph4nlp.prediction.classification.kg_completion"], [38, "module-graph4nlp.prediction.classification.link_prediction"], [38, "module-graph4nlp.prediction.classification.node_classification"], [38, "module-graph4nlp.prediction.generation"]], "node_attributes (graph4nlp.data.data.graphdata property)": [[32, "graph4nlp.data.data.GraphData.node_attributes"]], "node_feature_names() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.node_feature_names"]], "node_features (graph4nlp.data.data.graphdata property)": [[32, "graph4nlp.data.data.GraphData.node_features"]], "nodes (graph4nlp.data.data.graphdata property)": [[32, "graph4nlp.data.data.GraphData.nodes"]], "parse_file() (graph4nlp.data.dataset.dataset method)": [[32, "graph4nlp.data.dataset.Dataset.parse_file"], [32, "id13"]], "parse_file() (graph4nlp.data.dataset.doubletext2textdataset method)": [[32, "graph4nlp.data.dataset.DoubleText2TextDataset.parse_file"]], "parse_file() (graph4nlp.data.dataset.kgcompletiondataset method)": [[32, "graph4nlp.data.dataset.KGCompletionDataset.parse_file"]], "parse_file() (graph4nlp.data.dataset.sequencelabelingdataset method)": [[32, "graph4nlp.data.dataset.SequenceLabelingDataset.parse_file"]], "parse_file() (graph4nlp.data.dataset.text2labeldataset method)": [[32, "graph4nlp.data.dataset.Text2LabelDataset.parse_file"], [32, "id21"]], "parse_file() (graph4nlp.data.dataset.text2textdataset method)": [[32, "graph4nlp.data.dataset.Text2TextDataset.parse_file"]], "parse_file() (graph4nlp.data.dataset.text2treedataset method)": [[32, "graph4nlp.data.dataset.Text2TreeDataset.parse_file"]], "raw_dir (graph4nlp.data.dataset.dataset property)": [[32, "graph4nlp.data.dataset.Dataset.raw_dir"], [32, "id14"]], "raw_file_paths (graph4nlp.data.dataset.dataset property)": [[32, "graph4nlp.data.dataset.Dataset.raw_file_paths"], [32, "id15"]], "read_raw_data() (graph4nlp.data.dataset.dataset method)": [[32, "graph4nlp.data.dataset.Dataset.read_raw_data"], [32, "id16"]], "read_raw_data() (graph4nlp.data.dataset.kgcompletiondataset method)": [[32, "graph4nlp.data.dataset.KGCompletionDataset.read_raw_data"]], "remove_all_edges() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.remove_all_edges"]], "set_edge_feature() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.set_edge_feature"]], "set_node_features() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.set_node_features"]], "sparse_adj() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.sparse_adj"]], "split_features() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.split_features"]], "to() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.to"]], "to_batch() (in module graph4nlp.data.data)": [[32, "graph4nlp.data.data.to_batch"]], "to_dgl() (graph4nlp.data.data.graphdata method)": [[32, "graph4nlp.data.data.GraphData.to_dgl"]], "vectorization() (graph4nlp.data.dataset.dataset method)": [[32, "graph4nlp.data.dataset.Dataset.vectorization"], [32, "id17"]], "vectorization() (graph4nlp.data.dataset.doubletext2textdataset method)": [[32, "graph4nlp.data.dataset.DoubleText2TextDataset.vectorization"]], "vectorization() (graph4nlp.data.dataset.kgcompletiondataset method)": [[32, "graph4nlp.data.dataset.KGCompletionDataset.vectorization"]], "vectorization() (graph4nlp.data.dataset.sequencelabelingdataset method)": [[32, "graph4nlp.data.dataset.SequenceLabelingDataset.vectorization"]], "vectorization() (graph4nlp.data.dataset.text2labeldataset method)": [[32, "graph4nlp.data.dataset.Text2LabelDataset.vectorization"], [32, "id22"]], "vectorization() (graph4nlp.data.dataset.text2textdataset method)": [[32, "graph4nlp.data.dataset.Text2TextDataset.vectorization"]], "vectorization() (graph4nlp.data.dataset.text2treedataset method)": [[32, "graph4nlp.data.dataset.Text2TreeDataset.vectorization"]], "geodatasetfortree (class in graph4nlp.datasets)": [[33, "graph4nlp.datasets.GeoDatasetForTree"]], "jobsdataset (class in graph4nlp.datasets)": [[33, "graph4nlp.datasets.JobsDataset"]], "jobsdatasetfortree (class in graph4nlp.datasets)": [[33, "graph4nlp.datasets.JobsDatasetForTree"]], "kinshipdataset (class in graph4nlp.datasets)": [[33, "graph4nlp.datasets.KinshipDataset"]], "mawpsdatasetfortree (class in graph4nlp.datasets)": [[33, "graph4nlp.datasets.MawpsDatasetForTree"]], "squaddataset (class in graph4nlp.datasets)": [[33, "graph4nlp.datasets.SQuADDataset"]], "trecdataset (class in graph4nlp.datasets)": [[33, "graph4nlp.datasets.TrecDataset"]], "download() (graph4nlp.datasets.geodatasetfortree method)": [[33, "graph4nlp.datasets.GeoDatasetForTree.download"]], "download() (graph4nlp.datasets.jobsdataset method)": [[33, "graph4nlp.datasets.JobsDataset.download"]], "download() (graph4nlp.datasets.jobsdatasetfortree method)": [[33, "graph4nlp.datasets.JobsDatasetForTree.download"]], "download() (graph4nlp.datasets.kinshipdataset method)": [[33, "graph4nlp.datasets.KinshipDataset.download"]], "download() (graph4nlp.datasets.mawpsdatasetfortree method)": [[33, "graph4nlp.datasets.MawpsDatasetForTree.download"]], "download() (graph4nlp.datasets.squaddataset method)": [[33, "graph4nlp.datasets.SQuADDataset.download"]], "download() (graph4nlp.datasets.trecdataset method)": [[33, "graph4nlp.datasets.TrecDataset.download"]], "graph4nlp.datasets": [[33, "module-graph4nlp.datasets"]], "processed_file_names (graph4nlp.datasets.geodatasetfortree property)": [[33, "graph4nlp.datasets.GeoDatasetForTree.processed_file_names"]], "processed_file_names (graph4nlp.datasets.jobsdataset property)": [[33, "graph4nlp.datasets.JobsDataset.processed_file_names"]], "processed_file_names (graph4nlp.datasets.jobsdatasetfortree property)": [[33, "graph4nlp.datasets.JobsDatasetForTree.processed_file_names"]], "processed_file_names (graph4nlp.datasets.kinshipdataset property)": [[33, "graph4nlp.datasets.KinshipDataset.processed_file_names"]], "processed_file_names (graph4nlp.datasets.mawpsdatasetfortree property)": [[33, "graph4nlp.datasets.MawpsDatasetForTree.processed_file_names"]], "processed_file_names (graph4nlp.datasets.squaddataset property)": [[33, "graph4nlp.datasets.SQuADDataset.processed_file_names"]], "processed_file_names (graph4nlp.datasets.trecdataset property)": [[33, "graph4nlp.datasets.TrecDataset.processed_file_names"]], "raw_dir (graph4nlp.datasets.kinshipdataset property)": [[33, "graph4nlp.datasets.KinshipDataset.raw_dir"]], "raw_file_names (graph4nlp.datasets.geodatasetfortree property)": [[33, "graph4nlp.datasets.GeoDatasetForTree.raw_file_names"]], "raw_file_names (graph4nlp.datasets.jobsdataset property)": [[33, "graph4nlp.datasets.JobsDataset.raw_file_names"]], "raw_file_names (graph4nlp.datasets.jobsdatasetfortree property)": [[33, "graph4nlp.datasets.JobsDatasetForTree.raw_file_names"]], "raw_file_names (graph4nlp.datasets.kinshipdataset property)": [[33, "graph4nlp.datasets.KinshipDataset.raw_file_names"]], "raw_file_names (graph4nlp.datasets.mawpsdatasetfortree property)": [[33, "graph4nlp.datasets.MawpsDatasetForTree.raw_file_names"]], "raw_file_names (graph4nlp.datasets.squaddataset property)": [[33, "graph4nlp.datasets.SQuADDataset.raw_file_names"]], "raw_file_names (graph4nlp.datasets.trecdataset property)": [[33, "graph4nlp.datasets.TrecDataset.raw_file_names"]], "bleu (class in graph4nlp.evaluation)": [[34, "graph4nlp.evaluation.BLEU"]], "cider (class in graph4nlp.evaluation)": [[34, "graph4nlp.evaluation.CIDEr"]], "meteor (class in graph4nlp.evaluation)": [[34, "graph4nlp.evaluation.METEOR"]], "rouge (class in graph4nlp.evaluation)": [[34, "graph4nlp.evaluation.ROUGE"]], "calculate_scores() (graph4nlp.evaluation.bleu method)": [[34, "graph4nlp.evaluation.BLEU.calculate_scores"]], "calculate_scores() (graph4nlp.evaluation.cider method)": [[34, "graph4nlp.evaluation.CIDEr.calculate_scores"]], "calculate_scores() (graph4nlp.evaluation.meteor method)": [[34, "graph4nlp.evaluation.METEOR.calculate_scores"]], "calculate_scores() (graph4nlp.evaluation.rouge method)": [[34, "graph4nlp.evaluation.ROUGE.calculate_scores"]], "graph4nlp.evaluation": [[34, "module-graph4nlp.evaluation"]], "constituencybasedgraphconstruction (class in graph4nlp.graph_construction)": [[35, "graph4nlp.graph_construction.ConstituencyBasedGraphConstruction"]], "dependencybasedgraphconstruction (class in graph4nlp.graph_construction)": [[35, "graph4nlp.graph_construction.DependencyBasedGraphConstruction"]], "iebasedgraphconstruction (class in graph4nlp.graph_construction)": [[35, "graph4nlp.graph_construction.IEBasedGraphConstruction"]], "nodeembeddingbasedgraphconstruction (class in graph4nlp.graph_construction)": [[35, "graph4nlp.graph_construction.NodeEmbeddingBasedGraphConstruction"]], "nodeembeddingbasedrefinedgraphconstruction (class in graph4nlp.graph_construction)": [[35, "graph4nlp.graph_construction.NodeEmbeddingBasedRefinedGraphConstruction"]], "add_vocab() (graph4nlp.graph_construction.dependencybasedgraphconstruction method)": [[35, "graph4nlp.graph_construction.DependencyBasedGraphConstruction.add_vocab"]], "add_vocab() (graph4nlp.graph_construction.iebasedgraphconstruction method)": [[35, "graph4nlp.graph_construction.IEBasedGraphConstruction.add_vocab"]], "dynamic_topology() (graph4nlp.graph_construction.nodeembeddingbasedgraphconstruction method)": [[35, "graph4nlp.graph_construction.NodeEmbeddingBasedGraphConstruction.dynamic_topology"]], "dynamic_topology() (graph4nlp.graph_construction.nodeembeddingbasedrefinedgraphconstruction method)": [[35, "graph4nlp.graph_construction.NodeEmbeddingBasedRefinedGraphConstruction.dynamic_topology"]], "graph4nlp.graph_construction": [[35, "module-graph4nlp.graph_construction"]], "init_topology() (graph4nlp.graph_construction.nodeembeddingbasedgraphconstruction class method)": [[35, "graph4nlp.graph_construction.NodeEmbeddingBasedGraphConstruction.init_topology"]], "init_topology() (graph4nlp.graph_construction.nodeembeddingbasedrefinedgraphconstruction class method)": [[35, "graph4nlp.graph_construction.NodeEmbeddingBasedRefinedGraphConstruction.init_topology"]], "parsing() (graph4nlp.graph_construction.constituencybasedgraphconstruction class method)": [[35, "graph4nlp.graph_construction.ConstituencyBasedGraphConstruction.parsing"]], "parsing() (graph4nlp.graph_construction.dependencybasedgraphconstruction class method)": [[35, "graph4nlp.graph_construction.DependencyBasedGraphConstruction.parsing"]], "parsing() (graph4nlp.graph_construction.iebasedgraphconstruction class method)": [[35, "graph4nlp.graph_construction.IEBasedGraphConstruction.parsing"]], "static_topology() (graph4nlp.graph_construction.constituencybasedgraphconstruction class method)": [[35, "graph4nlp.graph_construction.ConstituencyBasedGraphConstruction.static_topology"]], "static_topology() (graph4nlp.graph_construction.dependencybasedgraphconstruction class method)": [[35, "graph4nlp.graph_construction.DependencyBasedGraphConstruction.static_topology"]], "static_topology() (graph4nlp.graph_construction.iebasedgraphconstruction class method)": [[35, "graph4nlp.graph_construction.IEBasedGraphConstruction.static_topology"]], "coverageloss (class in graph4nlp.loss)": [[37, "graph4nlp.loss.CoverageLoss"]], "generalloss (class in graph4nlp.loss)": [[37, "graph4nlp.loss.GeneralLoss"]], "kgloss (class in graph4nlp.loss)": [[37, "graph4nlp.loss.KGLoss"]], "seqgenerationloss (class in graph4nlp.loss)": [[37, "graph4nlp.loss.SeqGenerationLoss"]], "forward() (graph4nlp.loss.coverageloss method)": [[37, "graph4nlp.loss.CoverageLoss.forward"]], "forward() (graph4nlp.loss.generalloss method)": [[37, "graph4nlp.loss.GeneralLoss.forward"]], "forward() (graph4nlp.loss.kgloss method)": [[37, "graph4nlp.loss.KGLoss.forward"]], "forward() (graph4nlp.loss.seqgenerationloss method)": [[37, "graph4nlp.loss.SeqGenerationLoss.forward"]], "graph4nlp.loss": [[37, "module-graph4nlp.loss"]], "avgpooling (class in graph4nlp.prediction.classification.graph_classification)": [[38, "graph4nlp.prediction.classification.graph_classification.AvgPooling"]], "bilstmfeedforwardnn (class in graph4nlp.prediction.classification.node_classification)": [[38, "graph4nlp.prediction.classification.node_classification.BiLSTMFeedForwardNN"]], "bilstmfeedforwardnnlayer (class in graph4nlp.prediction.classification.node_classification)": [[38, "graph4nlp.prediction.classification.node_classification.BiLSTMFeedForwardNNLayer"]], "complex (class in graph4nlp.prediction.classification.kg_completion)": [[38, "graph4nlp.prediction.classification.kg_completion.ComplEx"]], "complexlayer (class in graph4nlp.prediction.classification.kg_completion)": [[38, "graph4nlp.prediction.classification.kg_completion.ComplExLayer"]], "concatfeedforwardnn (class in graph4nlp.prediction.classification.link_prediction)": [[38, "graph4nlp.prediction.classification.link_prediction.ConcatFeedForwardNN"]], "concatfeedforwardnnlayer (class in graph4nlp.prediction.classification.link_prediction)": [[38, "graph4nlp.prediction.classification.link_prediction.ConcatFeedForwardNNLayer"]], "decoderstrategy (class in graph4nlp.prediction.generation)": [[38, "graph4nlp.prediction.generation.DecoderStrategy"]], "distmult (class in graph4nlp.prediction.classification.kg_completion)": [[38, "graph4nlp.prediction.classification.kg_completion.DistMult"]], "distmultlayer (class in graph4nlp.prediction.classification.kg_completion)": [[38, "graph4nlp.prediction.classification.kg_completion.DistMultLayer"]], "elementsum (class in graph4nlp.prediction.classification.link_prediction)": [[38, "graph4nlp.prediction.classification.link_prediction.ElementSum"]], "elementsumlayer (class in graph4nlp.prediction.classification.link_prediction)": [[38, "graph4nlp.prediction.classification.link_prediction.ElementSumLayer"]], "feedforwardnn (class in graph4nlp.prediction.classification.graph_classification)": [[38, "graph4nlp.prediction.classification.graph_classification.FeedForwardNN"]], "feedforwardnn (class in graph4nlp.prediction.classification.node_classification)": [[38, "graph4nlp.prediction.classification.node_classification.FeedForwardNN"]], "feedforwardnnlayer (class in graph4nlp.prediction.classification.node_classification)": [[38, "graph4nlp.prediction.classification.node_classification.FeedForwardNNLayer"]], "stackedelementprod (class in graph4nlp.prediction.classification.link_prediction)": [[38, "graph4nlp.prediction.classification.link_prediction.StackedElementProd"]], "stackedelementprodlayer (class in graph4nlp.prediction.classification.link_prediction)": [[38, "graph4nlp.prediction.classification.link_prediction.StackedElementProdLayer"]], "stdrnndecoder (class in graph4nlp.prediction.generation)": [[38, "graph4nlp.prediction.generation.StdRNNDecoder"]], "stdtreedecoder (class in graph4nlp.prediction.generation)": [[38, "graph4nlp.prediction.generation.StdTreeDecoder"]], "decode_step() (graph4nlp.prediction.generation.stdrnndecoder method)": [[38, "graph4nlp.prediction.generation.StdRNNDecoder.decode_step"]], "decode_step() (graph4nlp.prediction.generation.stdtreedecoder method)": [[38, "graph4nlp.prediction.generation.StdTreeDecoder.decode_step"]], "extract_params() (graph4nlp.prediction.generation.stdrnndecoder method)": [[38, "graph4nlp.prediction.generation.StdRNNDecoder.extract_params"]], "forward() (graph4nlp.prediction.classification.graph_classification.avgpooling method)": [[38, "graph4nlp.prediction.classification.graph_classification.AvgPooling.forward"]], "forward() (graph4nlp.prediction.classification.graph_classification.feedforwardnn method)": [[38, "graph4nlp.prediction.classification.graph_classification.FeedForwardNN.forward"]], "forward() (graph4nlp.prediction.classification.kg_completion.complex method)": [[38, "graph4nlp.prediction.classification.kg_completion.ComplEx.forward"]], "forward() (graph4nlp.prediction.classification.kg_completion.complexlayer method)": [[38, "graph4nlp.prediction.classification.kg_completion.ComplExLayer.forward"]], "forward() (graph4nlp.prediction.classification.kg_completion.distmult method)": [[38, "graph4nlp.prediction.classification.kg_completion.DistMult.forward"]], "forward() (graph4nlp.prediction.classification.kg_completion.distmultlayer method)": [[38, "graph4nlp.prediction.classification.kg_completion.DistMultLayer.forward"]], "forward() (graph4nlp.prediction.classification.link_prediction.concatfeedforwardnn method)": [[38, "graph4nlp.prediction.classification.link_prediction.ConcatFeedForwardNN.forward"]], "forward() (graph4nlp.prediction.classification.link_prediction.concatfeedforwardnnlayer method)": [[38, "graph4nlp.prediction.classification.link_prediction.ConcatFeedForwardNNLayer.forward"]], "forward() (graph4nlp.prediction.classification.link_prediction.elementsum method)": [[38, "graph4nlp.prediction.classification.link_prediction.ElementSum.forward"]], "forward() (graph4nlp.prediction.classification.link_prediction.elementsumlayer method)": [[38, "graph4nlp.prediction.classification.link_prediction.ElementSumLayer.forward"]], "forward() (graph4nlp.prediction.classification.link_prediction.stackedelementprod method)": [[38, "graph4nlp.prediction.classification.link_prediction.StackedElementProd.forward"]], "forward() (graph4nlp.prediction.classification.link_prediction.stackedelementprodlayer method)": [[38, "graph4nlp.prediction.classification.link_prediction.StackedElementProdLayer.forward"]], "forward() (graph4nlp.prediction.classification.node_classification.bilstmfeedforwardnn method)": [[38, "graph4nlp.prediction.classification.node_classification.BiLSTMFeedForwardNN.forward"]], "forward() (graph4nlp.prediction.classification.node_classification.bilstmfeedforwardnnlayer method)": [[38, "graph4nlp.prediction.classification.node_classification.BiLSTMFeedForwardNNLayer.forward"]], "forward() (graph4nlp.prediction.classification.node_classification.feedforwardnn method)": [[38, "graph4nlp.prediction.classification.node_classification.FeedForwardNN.forward"]], "forward() (graph4nlp.prediction.classification.node_classification.feedforwardnnlayer method)": [[38, "graph4nlp.prediction.classification.node_classification.FeedForwardNNLayer.forward"]], "forward() (graph4nlp.prediction.generation.stdrnndecoder method)": [[38, "graph4nlp.prediction.generation.StdRNNDecoder.forward"]], "forward() (graph4nlp.prediction.generation.stdtreedecoder method)": [[38, "graph4nlp.prediction.generation.StdTreeDecoder.forward"]], "generate() (graph4nlp.prediction.generation.decoderstrategy method)": [[38, "graph4nlp.prediction.generation.DecoderStrategy.generate"]], "get_decoder_init_state() (graph4nlp.prediction.generation.stdrnndecoder method)": [[38, "graph4nlp.prediction.generation.StdRNNDecoder.get_decoder_init_state"]], "graph4nlp.prediction": [[38, "module-graph4nlp.prediction"]], "graph4nlp.prediction.classification": [[38, "module-graph4nlp.prediction.classification"]], "graph4nlp.prediction.classification.graph_classification": [[38, "module-graph4nlp.prediction.classification.graph_classification"]], "graph4nlp.prediction.classification.kg_completion": [[38, "module-graph4nlp.prediction.classification.kg_completion"]], "graph4nlp.prediction.classification.link_prediction": [[38, "module-graph4nlp.prediction.classification.link_prediction"]], "graph4nlp.prediction.classification.node_classification": [[38, "module-graph4nlp.prediction.classification.node_classification"]], "graph4nlp.prediction.generation": [[38, "module-graph4nlp.prediction.generation"]]}})